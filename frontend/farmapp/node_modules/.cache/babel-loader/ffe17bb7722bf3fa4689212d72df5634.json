{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\sensorpage.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport Sensordisplay from \"../sensordisplay\";\nimport IndoorFarmAPI from \"../indoorfarmapi\";\nimport { ResponsiveBump } from '@nivo/bump'; // make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyResponsiveBump = ({\n  data\n  /* see data tab */\n\n}) => /*#__PURE__*/_jsxDEV(ResponsiveBump, {\n  data: data,\n  margin: {\n    top: 40,\n    right: 100,\n    bottom: 40,\n    left: 60\n  },\n  colors: {\n    scheme: 'spectral'\n  },\n  lineWidth: 3,\n  activeLineWidth: 6,\n  inactiveLineWidth: 3,\n  inactiveOpacity: 0.15,\n  pointSize: 10,\n  activePointSize: 16,\n  inactivePointSize: 0,\n  pointColor: {\n    theme: 'background'\n  },\n  pointBorderWidth: 3,\n  activePointBorderWidth: 3,\n  pointBorderColor: {\n    from: 'serie.color'\n  },\n  axisTop: {\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    legend: '',\n    legendPosition: 'middle',\n    legendOffset: -36\n  },\n  axisRight: null,\n  axisBottom: {\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    legend: '',\n    legendPosition: 'middle',\n    legendOffset: 32\n  },\n  axisLeft: {\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    legend: 'ranking',\n    legendPosition: 'middle',\n    legendOffset: -40\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this);\n\n_c = MyResponsiveBump;\n\nconst Sensorpage = () => {\n  _s();\n\n  const [h1data, setH1data] = useState([{\n    \"id\": \"First\",\n    \"data\": [{\n      \"x\": 2000,\n      \"y\": 4\n    }, {\n      \"x\": 2001,\n      \"y\": 7\n    }, {\n      \"x\": 2002,\n      \"y\": 11\n    }, {\n      \"x\": 2003,\n      \"y\": 12\n    }, {\n      \"x\": 2004,\n      \"y\": 2\n    }]\n  }, {\n    \"id\": \"Second\",\n    \"data\": [{\n      \"x\": 2000,\n      \"y\": 10\n    }, {\n      \"x\": 2001,\n      \"y\": 2\n    }, {\n      \"x\": 2002,\n      \"y\": 3\n    }, {\n      \"x\": 2003,\n      \"y\": 7\n    }, {\n      \"x\": 2004,\n      \"y\": 8\n    }]\n  }, {\n    \"id\": \"Last\",\n    \"data\": [{\n      \"x\": 2000,\n      \"y\": 9\n    }, {\n      \"x\": 2001,\n      \"y\": 5\n    }, {\n      \"x\": 2002,\n      \"y\": 8\n    }, {\n      \"x\": 2003,\n      \"y\": 5\n    }, {\n      \"x\": 2004,\n      \"y\": 12\n    }]\n  }, {\n    \"id\": \"Serie 4\",\n    \"data\": [{\n      \"x\": 2000,\n      \"y\": 7\n    }, {\n      \"x\": 2001,\n      \"y\": 4\n    }, {\n      \"x\": 2002,\n      \"y\": 2\n    }, {\n      \"x\": 2003,\n      \"y\": 11\n    }, {\n      \"x\": 2004,\n      \"y\": 9\n    }]\n  }]);\n  const [msensorsarray, setSensors] = useState([]);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getsensordatas().then(sensors => {\n        setSensors(sensors);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [msensorsarray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensorbocck\",\n    children: [Sensordisplay(msensorsarray, true), MyResponsiveBump(h1data)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Sensorpage, \"8JO2eYLoG4aUs2ShZeQbVK9T8xU=\");\n\n_c2 = Sensorpage;\nexport default Sensorpage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyResponsiveBump\");\n$RefreshReg$(_c2, \"Sensorpage\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/sensorpage.js"],"names":["React","Component","useState","useEffect","Sensordisplay","IndoorFarmAPI","ResponsiveBump","MyResponsiveBump","data","top","right","bottom","left","scheme","theme","from","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","Sensorpage","h1data","setH1data","msensorsarray","setSensors","interval","setInterval","getsensordatas","then","sensors","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component,useState, useEffect } from \"react\";\r\nimport Sensordisplay from \"../sensordisplay\";\r\nimport IndoorFarmAPI from \"../indoorfarmapi\";\r\nimport { ResponsiveBump } from '@nivo/bump'\r\n\r\n\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\nconst MyResponsiveBump = ({ data /* see data tab */ }) => (\r\n  <ResponsiveBump\r\n      data={data}\r\n      margin={{ top: 40, right: 100, bottom: 40, left: 60 }}\r\n      colors={{ scheme: 'spectral' }}\r\n      lineWidth={3}\r\n      activeLineWidth={6}\r\n      inactiveLineWidth={3}\r\n      inactiveOpacity={0.15}\r\n      pointSize={10}\r\n      activePointSize={16}\r\n      inactivePointSize={0}\r\n      pointColor={{ theme: 'background' }}\r\n      pointBorderWidth={3}\r\n      activePointBorderWidth={3}\r\n      pointBorderColor={{ from: 'serie.color' }}\r\n      axisTop={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: '',\r\n          legendPosition: 'middle',\r\n          legendOffset: -36\r\n      }}\r\n      axisRight={null}\r\n      axisBottom={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: '',\r\n          legendPosition: 'middle',\r\n          legendOffset: 32\r\n      }}\r\n      axisLeft={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: 'ranking',\r\n          legendPosition: 'middle',\r\n          legendOffset: -40\r\n      }}\r\n  />\r\n)\r\n\r\n\r\nconst Sensorpage = () => {\r\n\r\n  const [h1data, setH1data] = useState([\r\n    {\r\n      \"id\": \"First\",\r\n      \"data\": [\r\n        {\r\n          \"x\": 2000,\r\n          \"y\": 4\r\n        },\r\n        {\r\n          \"x\": 2001,\r\n          \"y\": 7\r\n        },\r\n        {\r\n          \"x\": 2002,\r\n          \"y\": 11\r\n        },\r\n        {\r\n          \"x\": 2003,\r\n          \"y\": 12\r\n        },\r\n        {\r\n          \"x\": 2004,\r\n          \"y\": 2\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"Second\",\r\n      \"data\": [\r\n        {\r\n          \"x\": 2000,\r\n          \"y\": 10\r\n        },\r\n        {\r\n          \"x\": 2001,\r\n          \"y\": 2\r\n        },\r\n        {\r\n          \"x\": 2002,\r\n          \"y\": 3\r\n        },\r\n        {\r\n          \"x\": 2003,\r\n          \"y\": 7\r\n        },\r\n        {\r\n          \"x\": 2004,\r\n          \"y\": 8\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"Last\",\r\n      \"data\": [\r\n        {\r\n          \"x\": 2000,\r\n          \"y\": 9\r\n        },\r\n        {\r\n          \"x\": 2001,\r\n          \"y\": 5\r\n        },\r\n        {\r\n          \"x\": 2002,\r\n          \"y\": 8\r\n        },\r\n        {\r\n          \"x\": 2003,\r\n          \"y\": 5\r\n        },\r\n        {\r\n          \"x\": 2004,\r\n          \"y\": 12\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"Serie 4\",\r\n      \"data\": [\r\n        {\r\n          \"x\": 2000,\r\n          \"y\": 7\r\n        },\r\n        {\r\n          \"x\": 2001,\r\n          \"y\": 4\r\n        },\r\n        {\r\n          \"x\": 2002,\r\n          \"y\": 2\r\n        },\r\n        {\r\n          \"x\": 2003,\r\n          \"y\": 11\r\n        },\r\n        {\r\n          \"x\": 2004,\r\n          \"y\": 9\r\n        }\r\n      ]\r\n    }\r\n  \r\n  ]);\r\n\r\n    const [msensorsarray, setSensors] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n        IndoorFarmAPI.getsensordatas().then((sensors) => {\r\n          setSensors(sensors);\r\n        });\r\n      }, 1000);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, [msensorsarray]);\r\n\r\n    \r\n    return(\r\n        \r\n            <div className=\"sensorbocck\">\r\n              {Sensordisplay(msensorsarray,true)}\r\n\r\n              {MyResponsiveBump(h1data)}\r\n\r\n              </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Sensorpage;"]},"metadata":{},"sourceType":"module"}