{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\loginpage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport myGlobalvalues from \"../myGlobal\";\nimport { connect } from 'react-redux';\nimport { actionSetlogin } from '../mainAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst crypto = require('crypto');\n\nconst Loginpage = props => {\n  let logintype;\n\n  if (myGlobalvalues.islocal === false) {\n    logintype = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"ID:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"id\",\n        onChange: inputonchangeHandler\n      }, \"1234\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this);\n  } else {\n    adminmenu = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uAC04\\uD3B8\\uB85C\\uADF8\\uC778:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this);\n  }\n\n  function inputonchangeHandler(e) {\n    console.log(\"inputonchangeHandler : \" + e.target.name);\n  }\n\n  function loginbuttonHandler(e) {\n    console.log(\"loginbuttonHandler : \" + e.target.name);\n    props.dispatch(actionSetlogin(true));\n    window.sessionStorage.setItem('login', \"true\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [adminmenu, /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC554\\uD638:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"devname\",\n        onChange: inputonchangeHandler\n      }, \"1234\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"out_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_on\",\n          onClick: loginbuttonHandler,\n          children: \" \\uB85C\\uADF8\\uC778 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, \"sdaff\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Loginpage;\n\nconst mapStateToProps = function (state) {\n  return {\n    Islogin: state.Islogin\n  };\n};\n\nexport default connect(mapStateToProps)(Loginpage);\n\nvar _c;\n\n$RefreshReg$(_c, \"Loginpage\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/loginpage.js"],"names":["React","useState","useEffect","myGlobalvalues","connect","actionSetlogin","crypto","require","Loginpage","props","logintype","islocal","inputonchangeHandler","adminmenu","e","console","log","target","name","loginbuttonHandler","dispatch","window","sessionStorage","setItem","mapStateToProps","state","Islogin"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,aAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,QAA+B,eAA/B;;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAIA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAEzB,MAAIC,SAAJ;;AAKA,MAAIP,cAAc,CAACQ,OAAf,KAA2B,KAA/B,EAAsC;AAClCD,IAAAA,SAAS,gBAEP;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAA8B,QAAA,IAAI,EAAC,IAAnC;AAAwC,QAAA,QAAQ,EAAEE;AAAlD,SAAuB,MAAvB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAQH,GATD,MASO;AACLC,IAAAA,SAAS,gBACP;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAIH,WAASD,oBAAT,CAA8BE,CAA9B,EAAiC;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,CAAC,CAACG,MAAF,CAASC,IAAjD;AAED;;AACD,WAASC,kBAAT,CAA4BL,CAA5B,EAA+B;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BF,CAAC,CAACG,MAAF,CAASC,IAA/C;AAEAT,IAAAA,KAAK,CAACW,QAAN,CAAef,cAAc,CAAC,IAAD,CAA7B;AACCgB,IAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,EAAsC,MAAtC;AAEF;;AAGD,sBACE;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBACKV,SADL,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAA8B,QAAA,IAAI,EAAC,SAAnC;AAA6C,QAAA,QAAQ,EAAED;AAAvD,SAAuB,MAAvB;AAAA;AAAA;AAAA;AAAA,cALJ,eAMA;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACC;AAAQ,UAAA,SAAS,EAAC,WAAlB;AAA+B,UAAA,OAAO,EAAEO,kBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cANA;AAAA,OAAS,OAAT;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAxDD;;KAAMX,S;;AA2DN,MAAMgB,eAAe,GAAG,UAASC,KAAT,EAAgB;AACpC,SAAO;AACHC,IAAAA,OAAO,EAAED,KAAK,CAACC;AADZ,GAAP;AAID,CALH;;AAQA,eAAetB,OAAO,CAACoB,eAAD,CAAP,CAAyBhB,SAAzB,CAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport myGlobalvalues from \"../myGlobal\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport { actionSetlogin } from '../mainAction';\r\nconst crypto = require('crypto');\r\n\r\n\r\n\r\nconst Loginpage = (props) => {\r\n  \r\n    let logintype;\r\n\r\n    \r\n  \r\n    \r\n    if (myGlobalvalues.islocal === false) {\r\n        logintype = (\r\n       \r\n          <div className=\"content\">\r\n            <label>ID:  </label>\r\n            <input type=\"text\" key=\"1234\" name=\"id\" onChange={inputonchangeHandler} />\r\n          </div>\r\n       \r\n      );\r\n    } else {\r\n      adminmenu = (\r\n        <div className=\"content\">\r\n            <label>간편로그인:  </label>\r\n          </div>\r\n      );\r\n    }\r\n\r\n\r\n\r\n  function inputonchangeHandler(e) {\r\n    console.log(\"inputonchangeHandler : \" + e.target.name);\r\n    \r\n  }\r\n  function loginbuttonHandler(e) {\r\n    console.log(\"loginbuttonHandler : \" + e.target.name);\r\n\r\n    props.dispatch(actionSetlogin(true));\r\n     window.sessionStorage.setItem('login',\"true\");    \r\n\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n        <h2>login Page</h2>\r\n        <div key=\"sdaff\">\r\n            {adminmenu}\r\n\r\n        \r\n            <label>암호:  </label>\r\n            <input type=\"text\" key=\"1234\" name=\"devname\" onChange={inputonchangeHandler} />\r\n        <div className=\"out_button\">\r\n         <button className=\"button_on\"  onClick={loginbuttonHandler }> 로그인 </button> \r\n        </div>\r\n\r\n        </div>\r\n    </div>\r\n);\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = function(state) {\r\n    return {\r\n        Islogin: state.Islogin,\r\n     \r\n    }\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps)(Loginpage);\r\n"]},"metadata":{},"sourceType":"module"}