{"ast":null,"code":"const fs = require(\"fs\");\n\nclass Outputdevice {\n  static Writefile(filename, mlist) {\n    let data = JSON.stringify(mlist);\n    fs.writeFileSync(filename, data);\n  }\n\n  static Readfile(filename) {\n    let rawdata = fs.readFileSync(filename);\n    let objlist = JSON.parse(rawdata);\n    let alist = [];\n    objlist.forEach(element => {\n      let mdobj = Object.assign(new Outputdevice(), element); //삭제가 아니면 \n\n      if (mdobj.DevType != Outputdevice.OutDeviceTypeEnum.ODT_DELETE) {\n        alist.push(mdobj);\n      }\n    });\n    return alist;\n  }\n\n  static Clonbyjsonobj(mobj) {\n    return Object.assign(new Outputdevice(), mobj);\n  }\n\n  static CreateDefulatDevice(relaynum) {\n    let newdev = new Outputdevice();\n    newdev.UniqID = relaynum;\n    newdev.Name = \"릴레이-\" + (Number(relaynum) + 1);\n    newdev.Channel = relaynum;\n    newdev.DevType = Outputdevice.OutDeviceTypeEnum.ODT_RELAY;\n    return newdev;\n  }\n\n  constructor() {\n    this.UniqID = 0; ///고유식별 id 릴레이번호로 입력 0~23\n\n    this.Name = 0;\n    this.Channel = 0;\n    this.DevType = 0;\n    this.Status = 0;\n    this.Autocontrolid = 0;\n  }\n\n}\n\nOutputdevice.OPStatus = Object.freeze({\n  OPS_Off: \"off\",\n  //꺼짐\n  OPS_On: \"on\",\n  //켜짐\n  OPS_Local: \"local\",\n  //현장수동제어\n  OPS_Idle: \"idle\"\n});\nOutputdevice.OutDeviceTypeEnum = Object.freeze({\n  ODT_RELAY: 0,\n  ODT_PUMP: 1,\n  //\n  ODT_FAN: 2,\n  ODT_VALVE: 3,\n  ODT_LED: 4,\n  ODT_COOLER: 5,\n  ODT_HEATER: 6,\n  ODT_POWER: 7,\n  ODT_ETC: 99,\n  ODT_DELETE: 9999 //장치삭제\n\n});\nmodule.exports = Outputdevice;","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/commonjs/outputdevice.js"],"names":["fs","require","Outputdevice","Writefile","filename","mlist","data","JSON","stringify","writeFileSync","Readfile","rawdata","readFileSync","objlist","parse","alist","forEach","element","mdobj","Object","assign","DevType","OutDeviceTypeEnum","ODT_DELETE","push","Clonbyjsonobj","mobj","CreateDefulatDevice","relaynum","newdev","UniqID","Name","Number","Channel","ODT_RELAY","constructor","Status","Autocontrolid","OPStatus","freeze","OPS_Off","OPS_On","OPS_Local","OPS_Idle","ODT_PUMP","ODT_FAN","ODT_VALVE","ODT_LED","ODT_COOLER","ODT_HEATER","ODT_POWER","ODT_ETC","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,YAAN,CAAmB;AAqBD,SAATC,SAAS,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAChC,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAX;AACAL,IAAAA,EAAE,CAACS,aAAH,CAAiBL,QAAjB,EAA2BE,IAA3B;AACD;;AACc,SAARI,QAAQ,CAACN,QAAD,EAAW;AACxB,QAAIO,OAAO,GAAGX,EAAE,CAACY,YAAH,CAAgBR,QAAhB,CAAd;AACA,QAAIS,OAAO,GAAGN,IAAI,CAACO,KAAL,CAAWH,OAAX,CAAd;AAEA,QAAII,KAAK,GAAG,EAAZ;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAiBC,OAAD,IAAa;AAE1B,UAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAIlB,YAAJ,EAAd,EAAkCe,OAAlC,CAAZ,CAF0B,CAI1B;;AACA,UAAGC,KAAK,CAACG,OAAN,IAAkBnB,YAAY,CAACoB,iBAAb,CAA+BC,UAApD,EACA;AACCR,QAAAA,KAAK,CAACS,IAAN,CAAWN,KAAX;AACA;AACH,KATD;AAWA,WAAOH,KAAP;AACD;;AAEmB,SAAbU,aAAa,CAACC,IAAD,EAAO;AACzB,WAAOP,MAAM,CAACC,MAAP,CAAc,IAAIlB,YAAJ,EAAd,EAAkCwB,IAAlC,CAAP;AACD;;AAEyB,SAAnBC,mBAAmB,CAACC,QAAD,EAAW;AACnC,QAAIC,MAAM,GAAE,IAAI3B,YAAJ,EAAZ;AACA2B,IAAAA,MAAM,CAACC,MAAP,GAAcF,QAAd;AACAC,IAAAA,MAAM,CAACE,IAAP,GAAY,UAAQC,MAAM,CAACJ,QAAD,CAAN,GAAiB,CAAzB,CAAZ;AACAC,IAAAA,MAAM,CAACI,OAAP,GAAgBL,QAAhB;AACAC,IAAAA,MAAM,CAACR,OAAP,GAAiBnB,YAAY,CAACoB,iBAAb,CAA+BY,SAAhD;AAEA,WAAOL,MAAP;AACD;;AAEDM,EAAAA,WAAW,GAAG;AACZ,SAAKL,MAAL,GAAc,CAAd,CADY,CACK;;AACjB,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKE,OAAL,GAAe,CAAf;AACA,SAAKZ,OAAL,GAAe,CAAf;AACA,SAAKe,MAAL,GAAc,CAAd;AACA,SAAKC,aAAL,GAAqB,CAArB;AACD;;AAjEgB;;AAAbnC,Y,CACGoC,Q,GAAWnB,MAAM,CAACoB,MAAP,CAAc;AAC9BC,EAAAA,OAAO,EAAE,KADqB;AACd;AAChBC,EAAAA,MAAM,EAAE,IAFsB;AAEhB;AACdC,EAAAA,SAAS,EAAE,OAHmB;AAGV;AACpBC,EAAAA,QAAQ,EAAE;AAJoB,CAAd,C;AADdzC,Y,CAQGoB,iB,GAAoBH,MAAM,CAACoB,MAAP,CAAc;AACvCL,EAAAA,SAAS,EAAE,CAD4B;AAEvCU,EAAAA,QAAQ,EAAE,CAF6B;AAE1B;AACbC,EAAAA,OAAO,EAAE,CAH8B;AAIvCC,EAAAA,SAAS,EAAE,CAJ4B;AAKvCC,EAAAA,OAAO,EAAE,CAL8B;AAMvCC,EAAAA,UAAU,EAAE,CAN2B;AAOvCC,EAAAA,UAAU,EAAE,CAP2B;AAQvCC,EAAAA,SAAS,EAAE,CAR4B;AASvCC,EAAAA,OAAO,EAAE,EAT8B;AAUvC5B,EAAAA,UAAU,EAAE,IAV2B,CAUrB;;AAVqB,CAAd,C;AA4D7B6B,MAAM,CAACC,OAAP,GAAiBnD,YAAjB","sourcesContent":["const fs = require(\"fs\");\r\n\r\nclass Outputdevice {\r\n  static OPStatus = Object.freeze({\r\n    OPS_Off: \"off\", //꺼짐\r\n    OPS_On: \"on\", //켜짐\r\n    OPS_Local: \"local\", //현장수동제어\r\n    OPS_Idle: \"idle\",\r\n  });\r\n\r\n  static OutDeviceTypeEnum = Object.freeze({\r\n    ODT_RELAY: 0,\r\n    ODT_PUMP: 1, //\r\n    ODT_FAN: 2,\r\n    ODT_VALVE: 3,\r\n    ODT_LED: 4,\r\n    ODT_COOLER: 5,\r\n    ODT_HEATER: 6,\r\n    ODT_POWER: 7,\r\n    ODT_ETC: 99,\r\n    ODT_DELETE: 9999, //장치삭제\r\n  });\r\n\r\n  static Writefile(filename, mlist) {\r\n    let data = JSON.stringify(mlist);\r\n    fs.writeFileSync(filename, data);\r\n  }\r\n  static Readfile(filename) {\r\n    let rawdata = fs.readFileSync(filename);\r\n    let objlist = JSON.parse(rawdata);\r\n\r\n    let alist = [];\r\n    objlist.forEach((element) => {\r\n\r\n       let mdobj = Object.assign(new Outputdevice(), element);\r\n\r\n       //삭제가 아니면 \r\n       if(mdobj.DevType !=  Outputdevice.OutDeviceTypeEnum.ODT_DELETE)\r\n       {\r\n        alist.push(mdobj);\r\n       }\r\n    });\r\n\r\n    return alist;\r\n  }\r\n\r\n  static Clonbyjsonobj(mobj) {\r\n    return Object.assign(new Outputdevice(), mobj);\r\n  }\r\n\r\n  static CreateDefulatDevice(relaynum) {\r\n    let newdev =new Outputdevice();\r\n    newdev.UniqID=relaynum;\r\n    newdev.Name=\"릴레이-\"+(Number(relaynum)+1);\r\n    newdev.Channel =relaynum;\r\n    newdev.DevType  =Outputdevice.OutDeviceTypeEnum.ODT_RELAY;\r\n    \r\n    return newdev;\r\n  }\r\n\r\n  constructor() {\r\n    this.UniqID = 0; ///고유식별 id 릴레이번호로 입력 0~23\r\n    this.Name = 0;\r\n    this.Channel = 0;\r\n    this.DevType = 0;\r\n    this.Status = 0;\r\n    this.Autocontrolid = 0;\r\n  }\r\n}\r\n\r\nmodule.exports = Outputdevice;\r\n"]},"metadata":{},"sourceType":"module"}