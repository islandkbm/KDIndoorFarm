{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\sensordisplay.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SensorBox(msensor) {\n  let cname = \"sen_con\";\n  let svalue = msensor.valuestring + \" \" + msensor.ValueUnit;\n  let iconsrc = \"./image/sensor_\" + msensor.Sensortype + \".png\";\n  console.log(\"iconsrc :  \" + iconsrc);\n\n  if (msensor.errorcount > 30) {\n    cname = \"sensorboxdisconnect\";\n    svalue = \"연결끊김\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cname,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sen_name\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: iconsrc,\n        className: \"sensroicon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }, this), \" \", msensor.Name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sen_value\",\n      children: svalue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sen_result\",\n      children: msensor.errorcount > 30 ? \"연결끊김\" : \"Err=\" + msensor.errorcount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_c = SensorBox;\n\nfunction Sensordisplay(msensorsarray, isonlystatus) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"sen_title\",\n      children: \"SENSOR DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), msensorsarray.map((localState, index) => SensorBox(localState))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}\n\n_c2 = Sensordisplay;\nexport default Sensordisplay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SensorBox\");\n$RefreshReg$(_c2, \"Sensordisplay\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/sensordisplay.js"],"names":["React","SensorBox","msensor","cname","svalue","valuestring","ValueUnit","iconsrc","Sensortype","console","log","errorcount","Name","Sensordisplay","msensorsarray","isonlystatus","map","localState","index"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,MAAIC,KAAK,GAAE,SAAX;AACA,MAAIC,MAAM,GAAEF,OAAO,CAACG,WAAR,GAAsB,GAAtB,GAA2BH,OAAO,CAACI,SAA/C;AACA,MAAIC,OAAO,GAAC,oBAAkBL,OAAO,CAACM,UAA1B,GAAqC,MAAjD;AAECC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAeH,OAA3B;;AAED,MAAGL,OAAO,CAACS,UAAR,GAAoB,EAAvB,EACA;AACER,IAAAA,KAAK,GAAE,qBAAP;AACAC,IAAAA,MAAM,GAAC,MAAP;AACD;;AAEG,sBACE;AAAK,IAAA,SAAS,EAAED,KAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACc;AAAK,QAAA,GAAG,EAAEI,OAAV;AAAmB,QAAA,SAAS,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,cADd,OAC4DL,OAAO,CAACU,IADpE;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIY;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAA4BR;AAA5B;AAAA;AAAA;AAAA;AAAA,YAJZ,eAKY;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAA8BF,OAAO,CAACS,UAAR,GAAoB,EAArB,GAA0B,MAA1B,GAAmC,SAAST,OAAO,CAACS;AAAjF;AAAA;AAAA;AAAA;AAAA,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYH;;KAzBMV,S;;AA2BP,SAASY,aAAT,CAAuBC,aAAvB,EAAsCC,YAAtC,EAAoD;AAClD,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGD,aAAa,CAACE,GAAd,CAAkB,CAACC,UAAD,EAAaC,KAAb,KAAuBjB,SAAS,CAACgB,UAAD,CAAlD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;MAPQJ,a;AAYX,eAAeA,aAAf","sourcesContent":["\r\nimport React from \"react\";\r\n\r\nfunction SensorBox(msensor) {\r\n  let cname =\"sen_con\";\r\n  let svalue= msensor.valuestring + \" \" +msensor.ValueUnit ;\r\n  let iconsrc=\"./image/sensor_\"+msensor.Sensortype+\".png\";\r\n\r\n   console.log(\"iconsrc :  \" +iconsrc);\r\n\r\n  if(msensor.errorcount >30)\r\n  {\r\n    cname =\"sensorboxdisconnect\";\r\n    svalue=\"연결끊김\";\r\n  }\r\n\r\n      return (\r\n        <div className={cname}>\r\n          <div className=\"sen_name\">\r\n                        <img src={iconsrc} className=\"sensroicon\" /> {msensor.Name}\r\n                        </div>\r\n                    <div className=\"sen_value\">{svalue}</div>\r\n                    <div className=\"sen_result\">{(msensor.errorcount >30)? \"연결끊김\" :(\"Err=\" + msensor.errorcount)}</div>\r\n\r\n          \r\n        </div>\r\n      );\r\n    \r\n  }\r\n\r\n  function Sensordisplay(msensorsarray, isonlystatus) {\r\n    return (\r\n      <div className=\"sensor\">\r\n        <div class=\"sen_title\">SENSOR DISPLAY</div>\r\n        {msensorsarray.map((localState, index) => SensorBox(localState))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  \r\n\r\nexport default Sensordisplay;"]},"metadata":{},"sourceType":"module"}