{"ast":null,"code":"import reqMessage from \"./reqMessage\";\nimport Sensordevice from \"./commonjs/sensordevice\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport AutoControl from \"./commonjs/autocontrol\";\nimport responseMessage from \"./commonjs/responseMessage\";\nimport myGlobalvalues from \"./myGlobal\";\nimport KDCommon from \"./commonjs/kdcommon\";\nimport firebase from \"./firebase.js\";\nlet database = firebase.database();\nlet frrequest = database.ref(\"Sensors/request/message\");\nlet frresponse = database.ref(\"Sensors/response/message\");\nlet resposemsg;\nconst API = \"/api/\";\nexport default class IndoorFarmAPI {\n  constructor(islocal) {\n    this.islocal = islocal;\n\n    if (this.islocal === false) {\n      frresponse.on(\"value\", snapshot => {\n        const data = snapshot.val();\n        resposemsg = JSON.parse(data); //  console.log(\"resposemsg ...event...\");\n        //console.log(resposemsg);\n      });\n    }\n  }\n\n  async postData(url = \"\", data = {}) {\n    let response;\n\n    if (this.islocal === false) {\n      resposemsg = null;\n      frrequest.set(JSON.stringify(data)); //5초 동안 응답기다림.\n\n      for (let i = 0; i < 50; i++) {\n        await KDCommon.delay(100);\n\n        if (resposemsg != null) {\n          //    console.log(\"resposemsg\");\n          return resposemsg;\n        }\n      }\n    } else {\n      response = await fetch(url, {\n        method: \"POST\",\n        // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\",\n        // no-cors, *cors, same-origin\n        cache: \"no-cache\",\n        // *default, no-cache, reload, force-cache, only-if-cached\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data) //\n\n      });\n    }\n\n    return response.json();\n  }\n\n  async getsensordatas() {\n    const resdata = await this.getRequest(true, false, false, false);\n\n    if (resdata) {\n      return resdata.Sensors;\n    }\n\n    return null;\n  }\n\n  async getoutputstatus() {\n    const resdata = await this.getRequest(false, true, false, false);\n\n    if (resdata) {\n      return resdata.Outputs;\n    }\n\n    return null;\n  }\n\n  async getautocontrols() {\n    return await this.getRequest(true, true, true, true);\n  } // 서버에 데이터 저장 요청\n\n\n  async setRequest(mReqmsg) {\n    let resdata;\n\n    try {\n      resdata = await this.postData(API + \"farmrequest\", mReqmsg);\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\n    } catch (error) {\n      console.log(\" setRequest error : \" + error);\n    } finally {\n      console.log(\" setRequest finally  : \");\n      return resdata;\n    }\n  } //서버에 상태및 정보 요청\n\n\n  async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\n    let mrepmsg = new responseMessage();\n\n    try {\n      const reqmsg = new reqMessage(\"IF9987\"); //자동제어  센서목록, 출력목록 다 가져옴\n\n      reqmsg.getAutoControlstate = isautostate;\n      reqmsg.getSensors = isensor;\n      reqmsg.getOutputport = isoutdev;\n      reqmsg.getAutoControl = isautocontrol;\n      const resdata = await this.postData(API + \"farmrequest\", reqmsg);\n      resdata.AutoControls.forEach(element => {\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\n      });\n      resdata.Sensors.forEach(element => {\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\n      });\n      resdata.Outputs.forEach(element => {\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\n      });\n    } catch (error) {\n      console.log(\" getRequest error : \" + error);\n    } finally {\n      console.log(\" getRequest finally  : \" + mrepmsg);\n      return mrepmsg;\n    }\n  }\n\n  async setmanualonoff(moutputport) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.OutputManual.push(moutputport);\n    return await this.setRequest(reqmsg);\n  }\n\n  async setAutocontrolsetup(mAutocfg) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.Autoconfigitem = mAutocfg;\n    return await this.setRequest(reqmsg);\n  }\n\n  async setDeviceconfigsetup(mDevcfg) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.Deviceconfigitem = mDevcfg;\n    return await this.setRequest(reqmsg);\n  }\n\n  async setLogin(id, pw) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.loginID = id;\n    reqmsg.loginPW = pw;\n    return await this.setRequest(reqmsg);\n  }\n\n}","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/indoorfarmapi.js"],"names":["reqMessage","Sensordevice","Outputdevice","AutoControl","responseMessage","myGlobalvalues","KDCommon","firebase","database","frrequest","ref","frresponse","resposemsg","API","IndoorFarmAPI","constructor","islocal","on","snapshot","data","val","JSON","parse","postData","url","response","set","stringify","i","delay","fetch","method","mode","cache","headers","body","json","getsensordatas","resdata","getRequest","Sensors","getoutputstatus","Outputs","getautocontrols","setRequest","mReqmsg","console","log","IsOK","error","isensor","isoutdev","isautostate","isautocontrol","mrepmsg","reqmsg","getAutoControlstate","getSensors","getOutputport","getAutoControl","AutoControls","forEach","element","push","Clonbyjsonobj","setmanualonoff","moutputport","OutputManual","setAutocontrolsetup","mAutocfg","Autoconfigitem","setDeviceconfigsetup","mDevcfg","Deviceconfigitem","setLogin","id","pw","loginID","loginPW"],"mappings":"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","sourcesContent":["import reqMessage from \"./reqMessage\";\r\n\r\nimport Sensordevice from \"./commonjs/sensordevice\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\nimport AutoControl from \"./commonjs/autocontrol\";\r\nimport responseMessage from \"./commonjs/responseMessage\";\r\nimport myGlobalvalues from \"./myGlobal\";\r\nimport KDCommon from \"./commonjs/kdcommon\";\r\n\r\nimport firebase from \"./firebase.js\";\r\nlet database = firebase.database();\r\nlet frrequest = database.ref(\"Sensors/request/message\");\r\nlet frresponse = database.ref(\"Sensors/response/message\");\r\n\r\nlet resposemsg;\r\n\r\nconst API = \"/api/\";\r\n\r\nexport default class IndoorFarmAPI {\r\n  constructor(islocal) {\r\n    this.islocal = islocal;\r\n    if (this.islocal === false) {\r\n      frresponse.on(\"value\", (snapshot) => {\r\n        const data = snapshot.val();\r\n\r\n        resposemsg = JSON.parse(data);\r\n        //  console.log(\"resposemsg ...event...\");\r\n\r\n        //console.log(resposemsg);\r\n      });\r\n    }\r\n  }\r\n\r\n  async postData(url = \"\", data = {}) {\r\n    let response;\r\n\r\n    if (this.islocal === false) {\r\n      resposemsg = null;\r\n      frrequest.set(JSON.stringify(data));\r\n      //5초 동안 응답기다림.\r\n      for (let i = 0; i < 50; i++) {\r\n        await KDCommon.delay(100);\r\n        if (resposemsg != null) {\r\n          //    console.log(\"resposemsg\");\r\n          return resposemsg;\r\n        }\r\n      }\r\n    } else {\r\n      response = await fetch(url, {\r\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n        mode: \"cors\", // no-cors, *cors, same-origin\r\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n\r\n        body: JSON.stringify(data), //\r\n      });\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async getsensordatas() {\r\n    const resdata = await this.getRequest(true, false, false, false);\r\n    if (resdata) {\r\n      return resdata.Sensors;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async getoutputstatus() {\r\n    const resdata = await this.getRequest(false, true, false, false);\r\n    if (resdata) {\r\n      return resdata.Outputs;\r\n    }\r\n    return null;\r\n  }\r\n  async getautocontrols() {\r\n    return await this.getRequest(true, true, true, true);\r\n  }\r\n\r\n  // 서버에 데이터 저장 요청\r\n  async setRequest(mReqmsg) {\r\n    let resdata ;\r\n\r\n    try {\r\n       resdata = await this.postData(API + \"farmrequest\", mReqmsg);\r\n\r\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\r\n      \r\n    } catch (error) {\r\n      console.log(\" setRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" setRequest finally  : \" );\r\n      return resdata  ;\r\n      \r\n    }\r\n  }\r\n\r\n  //서버에 상태및 정보 요청\r\n  async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\r\n    let mrepmsg = new responseMessage();\r\n\r\n    try {\r\n      const reqmsg = new reqMessage(\"IF9987\");\r\n      //자동제어  센서목록, 출력목록 다 가져옴\r\n      reqmsg.getAutoControlstate = isautostate;\r\n      reqmsg.getSensors = isensor;\r\n      reqmsg.getOutputport = isoutdev;\r\n      reqmsg.getAutoControl = isautocontrol;\r\n\r\n      const resdata = await this.postData(API + \"farmrequest\", reqmsg);\r\n\r\n      resdata.AutoControls.forEach((element) => {\r\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Sensors.forEach((element) => {\r\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Outputs.forEach((element) => {\r\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\r\n      });\r\n    } catch (error) {\r\n      console.log(\" getRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" getRequest finally  : \" + mrepmsg);\r\n      return mrepmsg;\r\n    }\r\n  }\r\n\r\n  async setmanualonoff(moutputport) {\r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n\r\n    reqmsg.OutputManual.push(moutputport);\r\n\r\n    return await this.setRequest(reqmsg);\r\n  }\r\n\r\n  async setAutocontrolsetup(mAutocfg) {\r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n\r\n    reqmsg.Autoconfigitem = mAutocfg;\r\n\r\n    return await this.setRequest(reqmsg);\r\n  }\r\n\r\n  async setDeviceconfigsetup(mDevcfg) {\r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n\r\n    reqmsg.Deviceconfigitem = mDevcfg;\r\n\r\n    return await this.setRequest(reqmsg);\r\n  }\r\n\r\n  async setLogin(id, pw) {\r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n\r\n    reqmsg.loginID = id;\r\n    reqmsg.loginPW = pw;\r\n\r\n    return await this.setRequest(reqmsg);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}