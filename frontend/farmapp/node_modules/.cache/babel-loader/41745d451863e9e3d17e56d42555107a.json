{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\outputdevicedisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport manualMessage from \"./manualmessage\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction manualonoff(channel, onoff) {\n  if (onoff == true) {\n    console.log(\" manualonoff  on channel : \" + channel);\n  } else {\n    console.log(\" manualonoff  off channel : \" + channel);\n  }\n\n  const mdev = new manualMessage();\n  mdev.hardwareChannel = channel;\n  mdev.isonoff = onoff;\n  IndoorFarmAPI.setmanualonoff(mdev);\n}\n\nfunction outputdevbox(mydata, ntime) {\n  console.log(\"outputdevbox 01 : \" + ntime);\n  let ismanual;\n\n  if (mydata.Status === Outputdevice.OPStatus.OPS_Local) {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uD604\\uC7A5\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  } else if (mydata.Autocontrolid == 0) {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => manualonoff(mydata.Channel, true),\n        children: \"\\uC218\\uB3D9 On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 22\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => manualonoff(mydata.Channel, false),\n        children: \"\\uC218\\uB3D9 Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 95\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 18\n    }, this);\n  } else {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uC790\\uB3D9\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outputbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mydata.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [mydata.Status, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), ismanual]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n}\n\nfunction Outputdevicedisplay(updateintervalmsec) {\n  _s();\n\n  console.log(\"Outputdevicedisplay 01\");\n  const [moutdevarray, setUpdate] = useState([]);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getoutputstatus().then(devices => {\n        setUpdate(devices);\n      });\n    }, updateintervalmsec);\n    return () => clearInterval(interval);\n  }, [moutdevarray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outputtable\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"output display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), moutdevarray.map((localState, index) => outputdevbox(localState, updateintervalmsec))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Outputdevicedisplay, \"cEnadcLmD3zissn0URMn1MNxz64=\");\n\n_c = Outputdevicedisplay;\nexport default Outputdevicedisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Outputdevicedisplay\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/outputdevicedisplay.js"],"names":["React","Component","useState","useEffect","IndoorFarmAPI","manualMessage","Outputdevice","manualonoff","channel","onoff","console","log","mdev","hardwareChannel","isonoff","setmanualonoff","outputdevbox","mydata","ntime","ismanual","Status","OPStatus","OPS_Local","Autocontrolid","Channel","Name","Outputdevicedisplay","updateintervalmsec","moutdevarray","setUpdate","interval","setInterval","getoutputstatus","then","devices","clearInterval","map","localState","index"],"mappings":"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","sourcesContent":["\r\nimport React, { Component,useState, useEffect } from \"react\";\r\nimport IndoorFarmAPI from \"./indoorfarmapi\";\r\nimport manualMessage from \"./manualmessage\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\nfunction manualonoff(channel, onoff) {\r\n  if (onoff == true) {\r\n    console.log(\" manualonoff  on channel : \" + channel);\r\n  } else {\r\n    console.log(\" manualonoff  off channel : \" + channel);\r\n  }\r\n\r\n  const mdev = new manualMessage();\r\n  mdev.hardwareChannel = channel;\r\n  mdev.isonoff = onoff;\r\n\r\n  IndoorFarmAPI.setmanualonoff(mdev);\r\n}\r\n\r\n\r\n  function outputdevbox(mydata, ntime) {\r\n    console.log(\"outputdevbox 01 : \" + ntime);\r\n    let ismanual;\r\n  \r\n    if(mydata.Status  === Outputdevice.OPStatus.OPS_Local)\r\n    {\r\n\r\n      ismanual=<ul>현장제어중 </ul>;\r\n    }\r\n    else if( mydata.Autocontrolid ==0  )\r\n    {\r\n      ismanual = <ul><button onClick={() => manualonoff(mydata.Channel ,true)}>수동 On</button> <button onClick={() => manualonoff(mydata.Channel,false)}>수동 Off</button></ul>;\r\n      \r\n\r\n    }\r\n    else{\r\n      ismanual=<ul>자동제어중 </ul>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"outputbox\">\r\n      <ul>{mydata.Name}</ul>\r\n      <ul>{mydata.Status} </ul>\r\n      {ismanual}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n  function Outputdevicedisplay(updateintervalmsec) {\r\n    console.log(\"Outputdevicedisplay 01\");\r\n  \r\n    const [moutdevarray, setUpdate] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n        IndoorFarmAPI.getoutputstatus().then((devices) => {\r\n          setUpdate(devices);\r\n        });\r\n      }, updateintervalmsec);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, [moutdevarray]);\r\n  \r\n    return (\r\n      <div className=\"outputtable\">\r\n        <h1>output display</h1>\r\n        {moutdevarray.map((localState, index) => (\r\n          \r\n          outputdevbox(localState, updateintervalmsec)\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\n\r\nexport default Outputdevicedisplay;"]},"metadata":{},"sourceType":"module"}