{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\loginpage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport myGlobalvalues from \"../myGlobal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst crypto = require('crypto');\n\nconst Loginpage = props => {\n  let loginid;\n  let loginpw;\n  let logintype;\n  console.log(\"Loginpage  :\" + props.Islogin);\n  console.log(\"Loginpage islocal :\" + myGlobalvalues.islocal);\n\n  if (myGlobalvalues.islocal === false) {\n    logintype = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button_on\",\n        onClick: loginbuttonHandler,\n        children: \" \\uAD6C\\uAE00\\uB85C\\uADF8\\uC778 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button_on\",\n        onClick: loginbuttonHandler,\n        children: \" \\uCE74\\uCE74\\uC624\\uD1A1\\uB85C\\uADF8\\uC778 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this);\n  } else {\n    logintype = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uAC04\\uD3B8\\uB85C\\uADF8\\uC778:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC554\\uD638:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"inputloginpw\",\n        onChange: inputonchangeHandler\n      }, \"1234\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"out_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_on\",\n          onClick: loginbuttonHandler,\n          children: \" \\uB85C\\uADF8\\uC778 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this);\n  }\n\n  function inputonchangeHandler(e) {\n    console.log(\"inputonchangeHandler : \" + e.target.name);\n\n    switch (e.target.name) {\n      case \"inputloginid\":\n        loginid = e.target.value;\n        break;\n\n      case \"inputloginpw\":\n        loginpw = e.target.value;\n        break;\n    }\n  }\n\n  function loginbuttonHandler(e) {\n    console.log(\"loginbuttonHandler : \" + e.target.name + \" id : \" + loginid + \" , pw : \" + loginpw);\n    myGlobalvalues.farmapi.setLogin(loginid, loginpw).then(ret => {\n      if (ret) {\n        if (ret.IsOK == true) {\n          window.sessionStorage.setItem('login', ret.retMessage);\n          props.onSetlogin(ret.retMessage);\n          console.log(\" login ret : \" + ret.retMessage);\n        }\n      }\n    }); //window.sessionStorage.setItem('login',\"true\");    \n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: logintype\n    }, \"sdaff\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}; //export default connect(mapStateToProps,mapDispatchToProps)(Loginpage);\n\n\n_c = Loginpage;\nexport default Loginpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Loginpage\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/loginpage.js"],"names":["React","useState","useEffect","myGlobalvalues","crypto","require","Loginpage","props","loginid","loginpw","logintype","console","log","Islogin","islocal","loginbuttonHandler","inputonchangeHandler","e","target","name","value","farmapi","setLogin","then","ret","IsOK","window","sessionStorage","setItem","retMessage","onSetlogin"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport myGlobalvalues from \"../myGlobal\";\r\n\r\nconst crypto = require('crypto');\r\n\r\n\r\n\r\nconst Loginpage=(props)=>{\r\n\r\n    let loginid;\r\n    let loginpw;\r\n\r\n    \r\n    let logintype;\r\n\r\n    \r\n    console.log(\"Loginpage  :\" + props.Islogin)  ;\r\n    \r\n    console.log(\"Loginpage islocal :\" + myGlobalvalues.islocal)  ;\r\n    \r\n    if (myGlobalvalues.islocal === false) {\r\n        logintype = (\r\n       \r\n          <div className=\"content\">\r\n        \r\n                <button className=\"button_on\"  onClick={loginbuttonHandler }> 구글로그인 </button> \r\n                <button className=\"button_on\"  onClick={loginbuttonHandler }> 카카오톡로그인 </button> \r\n          </div>\r\n       \r\n      );\r\n    } else {\r\n        logintype = (\r\n        <div className=\"content\">\r\n            <label>간편로그인:  </label>\r\n            <label>암호:  </label>\r\n            <input type=\"text\" key=\"1234\" name=\"inputloginpw\" onChange={inputonchangeHandler} />\r\n            <div className=\"out_button\">\r\n            <button className=\"button_on\"  onClick={loginbuttonHandler }> 로그인 </button> \r\n            </div>\r\n            \r\n          </div>\r\n      );\r\n    }\r\n\r\n\r\n\r\n  function inputonchangeHandler(e) {\r\n    console.log(\"inputonchangeHandler : \" + e.target.name);\r\n    switch (e.target.name) {\r\n        case \"inputloginid\":\r\n            loginid= e.target.value;\r\n          break;\r\n  \r\n        case \"inputloginpw\":\r\n            loginpw= e.target.value;\r\n  \r\n          break;\r\n      }\r\n\r\n\r\n    \r\n  }\r\n  function loginbuttonHandler(e) {\r\n    console.log(\"loginbuttonHandler : \" + e.target.name + \" id : \" + loginid + \" , pw : \" + loginpw);\r\n\r\n\r\n    myGlobalvalues.farmapi.setLogin(loginid,loginpw).then((ret) => {\r\n        \r\n        if(ret)\r\n    {\r\n        if(ret.IsOK == true)\r\n        {\r\n            window.sessionStorage.setItem('login',ret.retMessage); \r\n            props.onSetlogin(ret.retMessage);\r\n            \r\n            console.log( \" login ret : \" +ret.retMessage);\r\n\r\n        }\r\n\r\n    }\r\n      });\r\n    \r\n\r\n\r\n    \r\n    \r\n    \r\n\r\n     //window.sessionStorage.setItem('login',\"true\");    \r\n\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n        <h2>login Page</h2>\r\n        <div key=\"sdaff\">\r\n            {logintype}\r\n\r\n        \r\n            \r\n\r\n        </div>\r\n    </div>\r\n);\r\n\r\n};\r\n\r\n\r\n//export default connect(mapStateToProps,mapDispatchToProps)(Loginpage);\r\n\r\nexport default Loginpage;\r\n"]},"metadata":{},"sourceType":"module"}