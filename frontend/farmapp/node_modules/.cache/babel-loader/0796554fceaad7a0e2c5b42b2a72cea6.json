{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SensorBox extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.props.data.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.valuestring, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.errorcount > 30 ? \"연결끊김\" : \"Err=\" + this.props.data.errorcount, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction Sensordisplaytest(updateintervalmsec) {\n  _s();\n\n  console.log(\"Sensordisplaytest 01\");\n  const [msensorsarray, setSensors] = useState([]);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getsensordatas().then(sensors => {\n        setSensors(sensors);\n      });\n    }, updateintervalmsec);\n    return () => clearInterval(interval);\n  }, [msensorsarray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensortatble\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"sensor display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), msensorsarray.map((localState, index) => /*#__PURE__*/_jsxDEV(SensorBox, {\n      data: localState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Sensordisplaytest, \"8k2h8u+a4XKCO/7kOqR+GU+4gDU=\");\n\n_c = Sensordisplaytest;\n\nconst Dashboard = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"dashboard Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorbocck\",\n      children: Sensordisplaytest(2000)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Sensordisplaytest\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/dashboard.js"],"names":["React","Component","useState","useEffect","IndoorFarmAPI","SensorBox","render","props","data","Name","valuestring","errorcount","Sensordisplaytest","updateintervalmsec","console","log","msensorsarray","setSensors","interval","setInterval","getsensordatas","then","sensors","clearInterval","map","localState","index","Dashboard"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAGA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAC9BK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA,kBAAK,KAAKC,KAAL,CAAWC,IAAX,CAAgBC;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBAAK,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,mBAAM,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,UAAhB,GAA4B,EAA7B,GAAkC,MAAlC,GAA2C,SAAS,KAAKJ,KAAL,CAAWC,IAAX,CAAgBG,UAAzE;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAT6B;;AAYhC,SAASC,iBAAT,CAA2BC,kBAA3B,EAA+C;AAAA;;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,QAAM,CAACC,aAAD,EAAgBC,UAAhB,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,QAAQ,GAAG,IAAf;AAEAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3Bf,MAAAA,aAAa,CAACgB,cAAd,GAA+BC,IAA/B,CAAqCC,OAAD,IAAa;AAC/CL,QAAAA,UAAU,CAACK,OAAD,CAAV;AACD,OAFD;AAGD,KAJqB,EAInBT,kBAJmB,CAAtB;AAMA,WAAO,MAAMU,aAAa,CAACL,QAAD,CAA1B;AACD,GAVQ,EAUN,CAACF,aAAD,CAVM,CAAT;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,aAAa,CAACQ,GAAd,CAAkB,CAACC,UAAD,EAAaC,KAAb,kBACjB,QAAC,SAAD;AAAW,MAAA,IAAI,EAAED;AAAjB;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzBQb,iB;;KAAAA,iB;;AA6BX,MAAMe,SAAS,GAAG,MAAM;AACpB,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8Bf,iBAAiB,CAAC,IAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;MAAMe,S;AAWN,eAAeA,SAAf","sourcesContent":["\r\nimport React, { Component,useState, useEffect } from \"react\";\r\nimport IndoorFarmAPI from \"./indoorfarmapi\";\r\n\r\n\r\nclass SensorBox extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"sensorbox\">\r\n          <ul>{this.props.data.Name}</ul>\r\n          <ul>{this.props.data.valuestring} </ul>\r\n          <ul>{(this.props.data.errorcount >30)? \"연결끊김\" :(\"Err=\" + this.props.data.errorcount)} </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  function Sensordisplaytest(updateintervalmsec) {\r\n    console.log(\"Sensordisplaytest 01\");\r\n  \r\n    const [msensorsarray, setSensors] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n        IndoorFarmAPI.getsensordatas().then((sensors) => {\r\n          setSensors(sensors);\r\n        });\r\n      }, updateintervalmsec);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, [msensorsarray]);\r\n  \r\n    return (\r\n      <div className=\"sensortatble\">\r\n        <h1>sensor display</h1>\r\n        {msensorsarray.map((localState, index) => (\r\n          <SensorBox data={localState} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n\r\nconst Dashboard = () => {\r\n    return(\r\n        <div>\r\n            <h2>dashboard Page</h2>\r\n            <div className=\"sensorbocck\">{Sensordisplaytest(2000)}</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}