{"ast":null,"code":"import reqMessage from \"./reqMessage\";\nimport Sensordevice from \"./commonjs/sensordevice\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport AutoControl from \"./commonjs/autocontrol\";\nimport responseMessage from \"./commonjs/responseMessage\";\nconst API = \"/api/\";\nexport default class IndoorFarmAPI {\n  static async postData(url = \"\", data = {}) {\n    const response = await fetch(url, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data) // \n\n    });\n    return response;\n  }\n\n  static async getsensordatas() {\n    const resdata = await this.getRequest(true, false, false, false);\n\n    if (resdata) {\n      return resdata.Sensors;\n    }\n\n    return null;\n  }\n\n  static async getoutputstatus() {\n    const resdata = await this.getRequest(false, true, false, false);\n\n    if (resdata) {\n      return resdata.Outputs;\n    }\n\n    return null;\n  }\n\n  static async getautocontrols() {\n    return await this.getRequest(true, true, true, true);\n  } // 서버에 데이터 저장 요청\n\n\n  static async setRequest(mItems, isautocfg, isdevcofig, ismanual) {\n    let isok = false;\n    console.log(\" setDeviceconfigsetup rsp : \" + isok);\n\n    try {\n      const reqmsg = new reqMessage();\n      reqmsg.setDeviceconfig = isdevcofig;\n      reqmsg.Deviceconfigitem = mItems;\n      reqmsg.setAutocontrol = isautocfg;\n      reqmsg.Autoconfigitem = mItems;\n      reqmsg.setManualControl = ismanual;\n      reqmsg.OutputManual.push(mItems);\n      const res = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\n      const resdata = await res.json();\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\n      isok = true;\n    } catch (error) {\n      console.log(\" setRequest error : \" + error);\n    } finally {\n      console.log(\" setRequest finally  : \" + isok);\n      return isok;\n    }\n  } //서버에 상태및 정보 요청\n\n\n  static async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\n    let mrepmsg = new responseMessage();\n\n    try {\n      const reqmsg = new reqMessage(); //자동제어  센서목록, 출력목록 다 가져옴\n\n      reqmsg.getAutoControlstate = isautostate;\n      reqmsg.getSensors = isensor;\n      reqmsg.getOutputport = isoutdev;\n      reqmsg.getAutoControl = isautocontrol;\n      const res = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\n      const resdata = await res.json();\n      resdata.AutoControls.forEach(element => {\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\n      });\n      resdata.Sensors.forEach(element => {\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\n      });\n      resdata.Outputs.forEach(element => {\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\n      });\n    } catch (error) {\n      console.log(\" getRequest error : \" + error);\n    } finally {\n      console.log(\" getRequest finally  : \" + mrepmsg);\n      return mrepmsg;\n    }\n  }\n\n  static async setmanualonoff(moutputport) {\n    return await this.setRequest(moutputport, false, false, true);\n  }\n\n  static async setAutocontrolsetup(mAutocfg) {\n    return await this.setRequest(mAutocfg, true, false, false);\n  }\n\n  static async setDeviceconfigsetup(mDevcfg) {\n    return await this.setRequest(mDevcfg, false, true, false);\n  }\n\n}","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/indoorfarmapi.js"],"names":["reqMessage","Sensordevice","Outputdevice","AutoControl","responseMessage","API","IndoorFarmAPI","postData","url","data","response","fetch","method","mode","cache","headers","body","JSON","stringify","getsensordatas","resdata","getRequest","Sensors","getoutputstatus","Outputs","getautocontrols","setRequest","mItems","isautocfg","isdevcofig","ismanual","isok","console","log","reqmsg","setDeviceconfig","Deviceconfigitem","setAutocontrol","Autoconfigitem","setManualControl","OutputManual","push","res","json","IsOK","error","isensor","isoutdev","isautostate","isautocontrol","mrepmsg","getAutoControlstate","getSensors","getOutputport","getAutoControl","AutoControls","forEach","element","Clonbyjsonobj","setmanualonoff","moutputport","setAutocontrolsetup","mAutocfg","setDeviceconfigsetup","mDevcfg"],"mappings":"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","sourcesContent":["import reqMessage from \"./reqMessage\";\r\n\r\nimport Sensordevice from \"./commonjs/sensordevice\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\nimport AutoControl from \"./commonjs/autocontrol\";\r\nimport responseMessage from \"./commonjs/responseMessage\";\r\n\r\nconst API = \"/api/\";\r\n\r\nexport default class IndoorFarmAPI {\r\n\r\n  static async postData(url = \"\", data = {}) {\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n\r\n      body: JSON.stringify(data), // \r\n    });\r\n    return response; \r\n  }\r\n\r\n  static async getsensordatas() {\r\n    const resdata = await this.getRequest(true, false, false, false);\r\n    if (resdata) {\r\n      return resdata.Sensors;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static async getoutputstatus() {\r\n    const resdata = await this.getRequest(false, true, false, false);\r\n    if (resdata) {\r\n      return resdata.Outputs;\r\n    }\r\n    return null;\r\n  }\r\n  static async getautocontrols() {\r\n    return await this.getRequest(true, true, true, true);\r\n  }\r\n\r\n  // 서버에 데이터 저장 요청\r\n  static async setRequest(mItems, isautocfg, isdevcofig, ismanual) {\r\n    let isok = false;\r\n\r\n    console.log(\" setDeviceconfigsetup rsp : \" + isok);\r\n    try {\r\n      const reqmsg = new reqMessage();\r\n      reqmsg.setDeviceconfig = isdevcofig;\r\n      reqmsg.Deviceconfigitem = mItems;\r\n      reqmsg.setAutocontrol = isautocfg;\r\n      reqmsg.Autoconfigitem = mItems;\r\n      reqmsg.setManualControl = ismanual;\r\n      reqmsg.OutputManual.push(mItems);\r\n\r\n      const res = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\r\n      const resdata = await res.json();\r\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\r\n      isok = true;\r\n    } catch (error) {\r\n      console.log(\" setRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" setRequest finally  : \" + isok);\r\n      return isok;\r\n    }\r\n  }\r\n\r\n  //서버에 상태및 정보 요청\r\n  static async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\r\n    let mrepmsg = new responseMessage();\r\n\r\n    try {\r\n      const reqmsg = new reqMessage();\r\n      //자동제어  센서목록, 출력목록 다 가져옴\r\n      reqmsg.getAutoControlstate = isautostate;\r\n      reqmsg.getSensors = isensor;\r\n      reqmsg.getOutputport = isoutdev;\r\n      reqmsg.getAutoControl = isautocontrol;\r\n\r\n      const res = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\r\n      const resdata = await res.json();\r\n\r\n      resdata.AutoControls.forEach((element) => {\r\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Sensors.forEach((element) => {\r\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Outputs.forEach((element) => {\r\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\r\n      });\r\n    } catch (error) {\r\n      console.log(\" getRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" getRequest finally  : \" + mrepmsg);\r\n      return mrepmsg;\r\n    }\r\n  }\r\n\r\n  static async setmanualonoff(moutputport) {\r\n    return await this.setRequest(moutputport, false, false, true);\r\n  }\r\n\r\n  static async setAutocontrolsetup(mAutocfg) {\r\n    return await this.setRequest(mAutocfg, true, false, false);\r\n  }\r\n\r\n  static async setDeviceconfigsetup(mDevcfg) {\r\n    return await this.setRequest(mDevcfg, false, true, false);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}