{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Loginpage from \"./pages/loginpage\";\nimport Mainpage from \"./pages/mainpage\";\nimport { connect } from \"react-redux\";\nimport { actionSetlogin } from \"./mainAction\";\nimport myGlobalvalues from \"./myGlobal\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst os = require(\"os\");\n\nfunction App(props) {\n  console.log(\"-------------------------react APP start---------------------\");\n  console.log(\"Hostname : \" + os.hostname() + \"OS Type : \" + os.type() + \"Platform : \" + os.platform());\n  console.log(\"myGlobalvalues count :\" + myGlobalvalues.ncount++);\n  const provider = window.sessionStorage.getItem(\"provider\");\n  console.log(\"provider :\" + provider);\n  let hostname = os.hostname();\n\n  if (hostname.indexOf(\"localhost\") != -1) {\n    ///로컬로 접속하면 관리자 계정임\n    myGlobalvalues.islocal = true;\n    myGlobalvalues.isuseradmin = true;\n  } else {\n    myGlobalvalues.islocal = false;\n    myGlobalvalues.isuseradmin = false;\n  }\n\n  myGlobalvalues.farmapi = new IndoorFarmAPI(myGlobalvalues.islocal);\n  console.log(myGlobalvalues);\n  const islogin = window.sessionStorage.getItem(\"login\");\n  console.log(\"islogin :\" + islogin);\n\n  if (islogin != null) {\n    if (islogin === \"true\") {\n      props.dispatch(actionSetlogin(true));\n    } else {\n      console.log(\"islogin false :\");\n      props.onSetlogin(true);\n    }\n  }\n\n  console.log(props.Islogin);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: props.Islogin === false ? /*#__PURE__*/_jsxDEV(Loginpage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 58\n    }, this) : /*#__PURE__*/_jsxDEV(Mainpage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 74\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n\n_c = App;\n\nconst mapStateToProps = function (state) {\n  return {\n    Islogin: state.Islogin\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetlogin: value => dispatch(actionSetlogin(value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/App.js"],"names":["React","useState","useEffect","Loginpage","Mainpage","connect","actionSetlogin","myGlobalvalues","IndoorFarmAPI","os","require","App","props","console","log","hostname","type","platform","ncount","provider","window","sessionStorage","getItem","indexOf","islocal","isuseradmin","farmapi","islogin","dispatch","onSetlogin","Islogin","mapStateToProps","state","mapDispatchToProps","value"],"mappings":"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","sourcesContent":["import \"./App.css\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport Loginpage from \"./pages/loginpage\";\nimport Mainpage from \"./pages/mainpage\";\nimport { connect } from \"react-redux\";\nimport { actionSetlogin } from \"./mainAction\";\n\nimport myGlobalvalues from \"./myGlobal\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\n\nconst os = require(\"os\");\n\nfunction App(props) {\n  console.log(\"-------------------------react APP start---------------------\");\n  console.log(\"Hostname : \" + os.hostname() + \"OS Type : \" + os.type() + \"Platform : \" + os.platform());\n  console.log(\"myGlobalvalues count :\" + myGlobalvalues.ncount++);\n\n  const provider = window.sessionStorage.getItem(\"provider\");\n  console.log(\"provider :\" + provider);\n\n  let hostname = os.hostname();\n  if (hostname.indexOf(\"localhost\") != -1) {\n    ///로컬로 접속하면 관리자 계정임\n    myGlobalvalues.islocal = true;\n    myGlobalvalues.isuseradmin = true;\n  } else {\n    myGlobalvalues.islocal = false;\n    myGlobalvalues.isuseradmin = false;\n  }\n\n  myGlobalvalues.farmapi = new IndoorFarmAPI(myGlobalvalues.islocal);\n\n  console.log(myGlobalvalues);\n\n  const islogin = window.sessionStorage.getItem(\"login\");\n  console.log(\"islogin :\" + islogin);\n  if (islogin != null) {\n    if (islogin === \"true\") {\n      props.dispatch(actionSetlogin(true));\n    } else {\n      console.log(\"islogin false :\");\n      props.onSetlogin(true);\n    }\n  }\n\n  console.log(props.Islogin);\n\n  return <div className=\"App\">{props.Islogin === false ? <Loginpage /> : <Mainpage />}</div>;\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    Islogin: state.Islogin,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSetlogin: (value) => dispatch(actionSetlogin(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}