{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Loginpage from \"./pages/loginpage\";\nimport Mainpage from \"./pages/mainpage\";\nimport myGlobalvalues from \"./myGlobal\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst os = require(\"os\");\n\nfunction App(props) {\n  _s();\n\n  console.log(\"-------------------------react APP start---------------------\");\n  console.log(\"Hostname : \" + os.hostname() + \"OS Type : \" + os.type() + \"Platform : \" + os.platform());\n  console.log(\"myGlobalvalues count :\" + myGlobalvalues.ncount++);\n  const islogin = window.sessionStorage.getItem('login');\n  const provider = window.sessionStorage.getItem('provider');\n  console.log(\"provider :\" + provider);\n  console.log(\"islogin :\" + islogin);\n  let hostname = os.hostname();\n\n  if (hostname.indexOf(\"localhost\") != -1) {\n    ///로컬로 접속하면 관리자 계정임\n    myGlobalvalues.islocal = true;\n    myGlobalvalues.isuseradmin = true;\n  } else {\n    myGlobalvalues.islocal = false;\n    myGlobalvalues.isuseradmin = false;\n  }\n\n  myGlobalvalues.farmapi = new IndoorFarmAPI(myGlobalvalues.islocal);\n  console.log(myGlobalvalues);\n  useEffect(() => {\n    props.dispatch(actionSetvalue(178));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: props.value === 178 ? /*#__PURE__*/_jsxDEV(Loginpage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 31\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Mainpage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 48\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\n\nconst mapStateToProps = function (state) {\n  return {\n    value: state.value\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/App.js"],"names":["React","useState","useEffect","connect","Loginpage","Mainpage","myGlobalvalues","IndoorFarmAPI","os","require","App","props","console","log","hostname","type","platform","ncount","islogin","window","sessionStorage","getItem","provider","indexOf","islocal","isuseradmin","farmapi","dispatch","actionSetvalue","value","mapStateToProps","state"],"mappings":";;;AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAIA,OAAOC,cAAP,MAA2B,YAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAIlBC,EAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBL,EAAE,CAACM,QAAH,EAAhB,GAAgC,YAAhC,GAA+CN,EAAE,CAACO,IAAH,EAA/C,GAA2D,aAA3D,GAA2EP,EAAE,CAACQ,QAAH,EAAvF;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAA4BP,cAAc,CAACW,MAAf,EAAxC;AAEA,QAAMC,OAAO,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAhB;AACA,QAAMC,QAAQ,GAAGH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,UAA9B,CAAjB;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAeS,QAA3B;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAcK,OAA1B;AAEA,MAAIJ,QAAQ,GAAGN,EAAE,CAACM,QAAH,EAAf;;AACA,MAAIA,QAAQ,CAACS,OAAT,CAAiB,WAAjB,KAAiC,CAAC,CAAtC,EAAyC;AACvC;AACAjB,IAAAA,cAAc,CAACkB,OAAf,GAAyB,IAAzB;AACAlB,IAAAA,cAAc,CAACmB,WAAf,GAA6B,IAA7B;AACD,GAJD,MAIO;AACLnB,IAAAA,cAAc,CAACkB,OAAf,GAAyB,KAAzB;AACAlB,IAAAA,cAAc,CAACmB,WAAf,GAA6B,KAA7B;AACD;;AAEDnB,EAAAA,cAAc,CAACoB,OAAf,GAAyB,IAAInB,aAAJ,CAAkBD,cAAc,CAACkB,OAAjC,CAAzB;AAEAZ,EAAAA,OAAO,CAACC,GAAR,CAAYP,cAAZ;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AAGdS,IAAAA,KAAK,CAACgB,QAAN,CAAeC,cAAc,CAAC,GAAD,CAA7B;AAED,GALQ,EAKN,EALM,CAAT;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGjB,KAAK,CAACkB,KAAN,KAAgB,GAAhB,gBAAuB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAvB,gBAAwC;AAAA,gBAAMxB,QAAQ;AAAd;AAAA;AAAA;AAAA;AAAA;AAD3C;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA7CQK,G;;KAAAA,G;;AA+CT,MAAMoB,eAAe,GAAG,UAASC,KAAT,EAAgB;AACtC,SAAO;AACNF,IAAAA,KAAK,EAAEE,KAAK,CAACF;AADP,GAAP;AAID,CALD;;AAOA,eAAgB1B,OAAO,CAAC2B,eAAD,CAAP,CAAyBpB,GAAzB,CAAhB","sourcesContent":["import \"./App.css\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport Loginpage from \"./pages/loginpage\";\nimport Mainpage from \"./pages/mainpage\";\n\n\n\nimport myGlobalvalues from \"./myGlobal\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\n\nconst os = require(\"os\");\n\n\nfunction App(props) {\n  \n\n\n  console.log(\"-------------------------react APP start---------------------\");\n  console.log(\"Hostname : \" + os.hostname() + \"OS Type : \" + os.type() + \"Platform : \" + os.platform());\n  console.log(\"myGlobalvalues count :\" + (myGlobalvalues.ncount++) );\n  \n  const islogin = window.sessionStorage.getItem('login');    \n  const provider = window.sessionStorage.getItem('provider');    \n  console.log(\"provider :\" + provider );\n  console.log(\"islogin :\" + islogin );\n  \n  let hostname = os.hostname();\n  if (hostname.indexOf(\"localhost\") != -1) {\n    ///로컬로 접속하면 관리자 계정임\n    myGlobalvalues.islocal = true;\n    myGlobalvalues.isuseradmin = true;\n  } else {\n    myGlobalvalues.islocal = false;\n    myGlobalvalues.isuseradmin = false;\n  }\n\n  myGlobalvalues.farmapi = new IndoorFarmAPI(myGlobalvalues.islocal);\n\n  console.log(myGlobalvalues);\n\n\n  \n    \n  useEffect(() => {\n\n    \n    props.dispatch(actionSetvalue(178));\n\n  }, []);\n\n\n\n  return (\n    <div className=\"App\">\n      {props.value === 178 ? (<Loginpage/> ): (<div>{Mainpage()}</div>)}\n      \n    </div>\n  );\n}\n\nconst mapStateToProps = function(state) {\n  return {\n   value: state.value,\n   \n  }\n}\n\nexport default  connect(mapStateToProps)(App);\n"]},"metadata":{},"sourceType":"module"}