{"ast":null,"code":"import reqMessage from \"./reqMessage\";\nimport Sensordevice from \"./commonjs/sensordevice\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport AutoControl from \"./commonjs/autocontrol\";\nimport responseMessage from \"./commonjs/responseMessage\";\nimport myGlobalvalues from \"./myGlobal\";\nimport firebase from \"./firebase.js\";\nlet database = firebase.database();\nlet frrequest = database.ref('Sensors/request/message');\nlet frresponse = database.ref('Sensors/response/message');\nconst API = \"/api/\";\nexport default class IndoorFarmAPI {\n  constructor(islocal) {\n    this.islocal = islocal;\n\n    if (this.islocal === false) {\n      frrequest.on('value', snapshot => {\n        const data = snapshot.val();\n        console.log(data);\n      });\n      frresponse.on('value', snapshot => {\n        const data = snapshot.val();\n        let resposemsg = JSON.parse(data);\n        console.log(data);\n      });\n    }\n  }\n\n  static async postData(url = \"\", data = {}) {\n    const response = await fetch(url, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data) // \n\n    });\n    return response.json();\n  }\n\n  async getsensordatas() {\n    const resdata = await this.getRequest(true, false, false, false);\n\n    if (resdata) {\n      return resdata.Sensors;\n    }\n\n    return null;\n  }\n\n  async getoutputstatus() {\n    const resdata = await this.getRequest(false, true, false, false);\n\n    if (resdata) {\n      return resdata.Outputs;\n    }\n\n    return null;\n  }\n\n  async getautocontrols() {\n    return await this.getRequest(true, true, true, true);\n  } // 서버에 데이터 저장 요청\n\n\n  async setRequest(mItems, isautocfg, isdevcofig, ismanual) {\n    let isok = false;\n    console.log(\" setDeviceconfigsetup rsp : \" + isok);\n\n    try {\n      const reqmsg = new reqMessage(\"IF9999\");\n      reqmsg.setDeviceconfig = isdevcofig;\n      reqmsg.Deviceconfigitem = mItems;\n      reqmsg.setAutocontrol = isautocfg;\n      reqmsg.Autoconfigitem = mItems;\n      reqmsg.setManualControl = ismanual;\n      reqmsg.OutputManual.push(mItems);\n      const resdata = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\n      isok = true;\n    } catch (error) {\n      console.log(\" setRequest error : \" + error);\n    } finally {\n      console.log(\" setRequest finally  : \" + isok);\n      return isok;\n    }\n  } //서버에 상태및 정보 요청\n\n\n  async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\n    let mrepmsg = new responseMessage();\n    console.log(myGlobalvalues);\n\n    try {\n      const reqmsg = new reqMessage(\"IF9999\"); //자동제어  센서목록, 출력목록 다 가져옴\n\n      reqmsg.getAutoControlstate = isautostate;\n      reqmsg.getSensors = isensor;\n      reqmsg.getOutputport = isoutdev;\n      reqmsg.getAutoControl = isautocontrol;\n      const resdata = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\n      resdata.AutoControls.forEach(element => {\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\n      });\n      resdata.Sensors.forEach(element => {\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\n      });\n      resdata.Outputs.forEach(element => {\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\n      });\n    } catch (error) {\n      console.log(\" getRequest error : \" + error);\n    } finally {\n      console.log(\" getRequest finally  : \" + mrepmsg);\n      return mrepmsg;\n    }\n  }\n\n  async setmanualonoff(moutputport) {\n    return await this.setRequest(moutputport, false, false, true);\n  }\n\n  async setAutocontrolsetup(mAutocfg) {\n    return await this.setRequest(mAutocfg, true, false, false);\n  }\n\n  async setDeviceconfigsetup(mDevcfg) {\n    return await this.setRequest(mDevcfg, false, true, false);\n  }\n\n}","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/indoorfarmapi.js"],"names":["reqMessage","Sensordevice","Outputdevice","AutoControl","responseMessage","myGlobalvalues","firebase","database","frrequest","ref","frresponse","API","IndoorFarmAPI","constructor","islocal","on","snapshot","data","val","console","log","resposemsg","JSON","parse","postData","url","response","fetch","method","mode","cache","headers","body","stringify","json","getsensordatas","resdata","getRequest","Sensors","getoutputstatus","Outputs","getautocontrols","setRequest","mItems","isautocfg","isdevcofig","ismanual","isok","reqmsg","setDeviceconfig","Deviceconfigitem","setAutocontrol","Autoconfigitem","setManualControl","OutputManual","push","IsOK","error","isensor","isoutdev","isautostate","isautocontrol","mrepmsg","getAutoControlstate","getSensors","getOutputport","getAutoControl","AutoControls","forEach","element","Clonbyjsonobj","setmanualonoff","moutputport","setAutocontrolsetup","mAutocfg","setDeviceconfigsetup","mDevcfg"],"mappings":"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","sourcesContent":["import reqMessage from \"./reqMessage\";\r\n\r\nimport Sensordevice from \"./commonjs/sensordevice\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\nimport AutoControl from \"./commonjs/autocontrol\";\r\nimport responseMessage from \"./commonjs/responseMessage\";\r\nimport myGlobalvalues from \"./myGlobal\";\r\n\r\n\r\nimport firebase from \"./firebase.js\";\r\nlet database = firebase.database();\r\nlet frrequest =database.ref('Sensors/request/message');\r\nlet frresponse =database.ref('Sensors/response/message');\r\n\r\n\r\n\r\n\r\n\r\nconst API = \"/api/\";\r\n\r\nexport default class IndoorFarmAPI {\r\n\r\n\r\n  constructor(islocal) {\r\n  this.islocal= islocal;\r\n  if(this.islocal === false)\r\n  {\r\n\r\n      frrequest.on('value', (snapshot) => {\r\n        const data = snapshot.val();\r\n        \r\n        console.log(data);\r\n    });\r\n\r\n    frresponse.on('value', (snapshot) => {\r\n        const data = snapshot.val();\r\n\r\n        let resposemsg = JSON.parse(data);\r\n         console.log(data);\r\n         \r\n    });\r\n    \r\n  }\r\n\r\n\r\n  }\r\n\r\n  static async postData(url = \"\", data = {}) {\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n\r\n      body: JSON.stringify(data), // \r\n    });\r\n    return response.json(); \r\n  }\r\n\r\n   async getsensordatas() {\r\n    const resdata = await this.getRequest(true, false, false, false);\r\n    if (resdata) {\r\n      return resdata.Sensors;\r\n    }\r\n    return null;\r\n  }\r\n\r\n   async getoutputstatus() {\r\n    const resdata = await this.getRequest(false, true, false, false);\r\n    if (resdata) {\r\n      return resdata.Outputs;\r\n    }\r\n    return null;\r\n  }\r\n   async getautocontrols() {\r\n    return await this.getRequest(true, true, true, true);\r\n  }\r\n\r\n  // 서버에 데이터 저장 요청\r\n   async setRequest(mItems, isautocfg, isdevcofig, ismanual) {\r\n    let isok = false;\r\n\r\n    console.log(\" setDeviceconfigsetup rsp : \" + isok);\r\n    try {\r\n      const reqmsg = new reqMessage(\"IF9999\");\r\n      reqmsg.setDeviceconfig = isdevcofig;\r\n      reqmsg.Deviceconfigitem = mItems;\r\n      reqmsg.setAutocontrol = isautocfg;\r\n      reqmsg.Autoconfigitem = mItems;\r\n      reqmsg.setManualControl = ismanual;\r\n      reqmsg.OutputManual.push(mItems);\r\n\r\n      const resdata = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\r\n      \r\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\r\n      isok = true;\r\n    } catch (error) {\r\n      console.log(\" setRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" setRequest finally  : \" + isok);\r\n      return isok;\r\n    }\r\n  }\r\n\r\n  //서버에 상태및 정보 요청\r\n   async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\r\n    let mrepmsg = new responseMessage();\r\n \r\n    console.log(myGlobalvalues);\r\n\r\n\r\n    try {\r\n      const reqmsg = new reqMessage(\"IF9999\");\r\n      //자동제어  센서목록, 출력목록 다 가져옴\r\n      reqmsg.getAutoControlstate = isautostate;\r\n      reqmsg.getSensors = isensor;\r\n      reqmsg.getOutputport = isoutdev;\r\n      reqmsg.getAutoControl = isautocontrol;\r\n\r\n      const resdata = await IndoorFarmAPI.postData(API + \"farmrequest\", reqmsg);\r\n      \r\n\r\n      resdata.AutoControls.forEach((element) => {\r\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Sensors.forEach((element) => {\r\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Outputs.forEach((element) => {\r\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\r\n      });\r\n    } catch (error) {\r\n      console.log(\" getRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" getRequest finally  : \" + mrepmsg);\r\n      return mrepmsg;\r\n    }\r\n  }\r\n\r\n   async setmanualonoff(moutputport) {\r\n    return await this.setRequest(moutputport, false, false, true);\r\n  }\r\n\r\n   async setAutocontrolsetup(mAutocfg) {\r\n    return await this.setRequest(mAutocfg, true, false, false);\r\n  }\r\n\r\n   async setDeviceconfigsetup(mDevcfg) {\r\n    return await this.setRequest(mDevcfg, false, true, false);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}