{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\autocontrolpage.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport AutoControlconfig from \"../commonjs/autocontrolconfig\";\nimport IndoorFarmAPI from \"../indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Autocontrolpage = () => {\n  _s();\n\n  const [mSensors, setUpdatesensor] = useState([]);\n  const [mAutolist, setUpdateauto] = useState([]);\n  const [mDevices, setUpdatedevice] = useState([]);\n  const [mSelecteditem, setupselected] = useState(null);\n  useEffect(() => {\n    IndoorFarmAPI.getautocontrols().then(mrsp => {\n      setUpdatesensor(mrsp.Sensors);\n      setUpdateauto(mrsp.AutoControls);\n      setUpdatedevice(mrsp.Outputs);\n    });\n  }, []);\n\n  function secToTime(dayseconds) {\n    let hour = dayseconds / 3600;\n    let min = dayseconds / 60 % 60;\n    if (hour < 10) hour = \"0\" + hour;\n    if (min < 10) min = \"0\" + min;\n    return hour + \":\" + min;\n  }\n\n  function autocontroleditbox(mydata, msensorlist, mdevlist) {\n    if (mydata == null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, this);\n    } else {\n      let copycfg = AutoControlconfig.deepcopy(mydata.mConfig); //let starttime_sec =/3600)+\":\"+ ((mydata.mConfig.starttime/60)%60);\n      //let endtime_sec = (mydata.mConfig.endtime/3600)+\":\"+ ((mydata.mConfig.endtime/60)%60);\n\n      function setupSave(mcfg) {\n        console.log(\"setupSave uid: \" + mcfg.uniqid + \" name : \" + mcfg.name);\n        IndoorFarmAPI.setAutocontrolsetup(mcfg).then(ret => {\n          console.log(\"setAutocontrolsetup  uid: \" + ret);\n        });\n      }\n\n      function inputonchangeHandler(e) {\n        console.log(\"inputonchangeHandler : \" + e.target.name);\n\n        switch (e.target.name) {\n          case \"name\":\n            copycfg.name = e.target.value;\n            break;\n\n          case \"onvalue\":\n            copycfg.onvalue = Number(e.target.value);\n            break;\n\n          case \"offvalue\":\n            copycfg.offvalue = Number(e.target.value);\n            break;\n\n          case \"starttime\":\n            const [hours, minutes] = e.target.value.split(':');\n            console.log(\"time : \" + e.target.value + \" number : \" + Number(hours * 3600 + minutes * 60));\n            copycfg.starttime = Number(e.target.value);\n            break;\n\n          case \"endtime\":\n            copycfg.endtime = Number(e.target.value);\n            break;\n        }\n\n        if (e.target.name === \"devcheck\") {\n          let isexist = false;\n\n          for (let i = 0; i < copycfg.devids.length; i++) {\n            if (copycfg.devids[i] === Number(e.target.id)) {\n              if (e.target.checked === false) {\n                copycfg.devids.splice(i, 1);\n                return;\n              } else {\n                isexist = true;\n                break;\n              }\n            }\n          } //새로추가\n\n\n          if (isexist === false) {\n            copycfg.devids.push(Number(e.target.id));\n          }\n        }\n      }\n\n      function sensorselectbox(mitem) {\n        return /*#__PURE__*/_jsxDEV(\"ui\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"sensorsel\",\n            defaultChecked: mitem.seleted,\n            id: mitem.uniqkey\n          }, mydata.mConfig.uniqid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), mitem.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this);\n      }\n\n      function devicecheckbox(mitem) {\n        return /*#__PURE__*/_jsxDEV(\"ui\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: \"devcheck\",\n            defaultChecked: mitem.seleted,\n            id: mitem.uniqkey\n          }, mydata.mConfig.uniqid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), mitem.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this);\n      }\n\n      let slist = [];\n\n      for (const ss of msensorlist) {\n        let seleted = false;\n\n        if (mydata.mConfig.sensorid === ss.UniqID) {\n          console.log(\"select sensorid : \" + ss.UniqID);\n          seleted = true;\n        }\n\n        const title = ss.Name + \"(노드:\" + ss.nodeID + \" , 채널 :\" + ss.channel + \")\";\n        const uniqkey = ss.UniqID;\n        slist.push({\n          title: title,\n          seleted: seleted,\n          uniqkey: uniqkey\n        });\n      }\n\n      let dlist = [];\n\n      for (const dev of mdevlist) {\n        let seleted = false;\n\n        for (const di of mydata.mConfig.devids) {\n          if (di === dev.UniqID) {\n            console.log(\"select dev id : \" + dev.UniqID);\n            seleted = true;\n            break;\n          }\n        }\n\n        const title = dev.Name + \"( 채널 :\" + dev.Channel + \")\";\n        const uniqkey = dev.UniqID;\n        dlist.push({\n          title: title,\n          seleted: seleted,\n          uniqkey: uniqkey\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autosetupbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: endtime_sec\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uC774\\uB984: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          defaultValue: mydata.mConfig.name,\n          name: \"name\",\n          onChange: inputonchangeHandler\n        }, \"name\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uC2DC\\uC791\\uC2DC\\uAC04: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          defaultValue: secToTime(mydata.mConfig.starttime),\n          name: \"starttime\",\n          onChange: inputonchangeHandler\n        }, \"starttime\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uC885\\uB8CC\\uC2DC\\uAC04: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          defaultValue: secToTime(mydata.mConfig.endtime),\n          name: \"endtime\",\n          onChange: inputonchangeHandler\n        }, \"endtime\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"outportselectbox\",\n          onChange: inputonchangeHandler,\n          children: dlist.map((localState, index) => devicecheckbox(localState))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensorselectbox\",\n          onChange: inputonchangeHandler,\n          children: slist.map((localState, index) => sensorselectbox(localState))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uCF1C\\uC9D0\\uC870\\uAC74: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: mydata.mConfig.onvalue,\n          name: \"onvalue\",\n          onChange: inputonchangeHandler\n        }, \"onvalue\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uAEBC\\uC9D0\\uC870\\uAC74: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: mydata.mConfig.offvalue,\n          name: \"offvalue\",\n          onChange: inputonchangeHandler\n        }, \"offvalue\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setupSave(copycfg),\n          id: \"editcheck\",\n          children: \" \\uC800\\uC7A5    \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setupselected(null),\n          id: \"editcheck\",\n          children: \"\\uCDE8\\uC18C    \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  function autocontrolbox(mydata) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocontrolbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"ui\", {\n        children: \" ... ...............\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ui\", {\n        children: mydata.mConfig.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ui\", {\n        children: mydata.mConfig.enabled == true ? \"작동중\" : \"정지됨\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setupselected(mydata),\n        id: \"editcheck\",\n        children: \" \\uC218\\uC815 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Autocontrol Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controltop\",\n      children: [\"\\uC815\\uB82C :\", /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"pets\",\n        id: \"pet-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"1\",\n          children: \"\\uC2DC\\uAC04\\uC21C\\uC11C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2\",\n          children: \"\\uC774\\uB984\\uC21C\\uC11C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"3\",\n          children: \"\\uCE74\\uD14C\\uACE0\\uB9AC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"+ \\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocontroltable\",\n      children: [autocontroleditbox(mSelecteditem, mSensors, mDevices), mAutolist.map((localState, index) => autocontrolbox(localState))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Autocontrolpage, \"20OoqUTIIBIiutOSzshmewZvWQU=\");\n\n_c = Autocontrolpage;\nexport default Autocontrolpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocontrolpage\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/autocontrolpage.js"],"names":["React","Component","useState","useEffect","AutoControlconfig","IndoorFarmAPI","Autocontrolpage","mSensors","setUpdatesensor","mAutolist","setUpdateauto","mDevices","setUpdatedevice","mSelecteditem","setupselected","getautocontrols","then","mrsp","Sensors","AutoControls","Outputs","secToTime","dayseconds","hour","min","autocontroleditbox","mydata","msensorlist","mdevlist","copycfg","deepcopy","mConfig","setupSave","mcfg","console","log","uniqid","name","setAutocontrolsetup","ret","inputonchangeHandler","e","target","value","onvalue","Number","offvalue","hours","minutes","split","starttime","endtime","isexist","i","devids","length","id","checked","splice","push","sensorselectbox","mitem","seleted","uniqkey","title","devicecheckbox","slist","ss","sensorid","UniqID","Name","nodeID","channel","dlist","dev","di","Channel","endtime_sec","map","localState","index","autocontrolbox","enabled"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport AutoControlconfig from \"../commonjs/autocontrolconfig\";\r\nimport IndoorFarmAPI from \"../indoorfarmapi\";\r\n\r\nconst Autocontrolpage = () => {\r\n  const [mSensors, setUpdatesensor] = useState([]);\r\n  const [mAutolist, setUpdateauto] = useState([]);\r\n  const [mDevices, setUpdatedevice] = useState([]);\r\n  const [mSelecteditem, setupselected] = useState(null);\r\n\r\n  useEffect(() => {\r\n    IndoorFarmAPI.getautocontrols().then((mrsp) => {\r\n      setUpdatesensor(mrsp.Sensors);\r\n      setUpdateauto(mrsp.AutoControls);\r\n      setUpdatedevice(mrsp.Outputs);\r\n    });\r\n  }, []);\r\n\r\n  function secToTime(dayseconds)\r\n  {\r\n    let hour=dayseconds/3600;\r\n    let min=(dayseconds/60)%60;\r\n    if(hour <10) hour=\"0\"+hour;\r\n    if(min <10) min=\"0\"+min;\r\n    return  (hour+\":\"+min);\r\n  }\r\n\r\n  function autocontroleditbox(mydata, msensorlist, mdevlist) {\r\n    if (mydata == null) {\r\n      return <div></div>;\r\n    } else {\r\n      let copycfg = AutoControlconfig.deepcopy(mydata.mConfig);\r\n\r\n      //let starttime_sec =/3600)+\":\"+ ((mydata.mConfig.starttime/60)%60);\r\n      //let endtime_sec = (mydata.mConfig.endtime/3600)+\":\"+ ((mydata.mConfig.endtime/60)%60);\r\n\r\n      function setupSave(mcfg) {\r\n        console.log(\"setupSave uid: \" + mcfg.uniqid + \" name : \" + mcfg.name);\r\n        IndoorFarmAPI.setAutocontrolsetup(mcfg).then((ret) => {\r\n          console.log(\"setAutocontrolsetup  uid: \" + ret);\r\n        });\r\n      }\r\n\r\n      function inputonchangeHandler(e) {\r\n        console.log(\"inputonchangeHandler : \" + e.target.name);\r\n\r\n        switch(e.target.name)\r\n        {\r\n          case \"name\": copycfg.name = e.target.value; break;\r\n\r\n          case \"onvalue\": copycfg.onvalue = Number(e.target.value);break;\r\n          case \"offvalue\": copycfg.offvalue = Number(e.target.value); break;\r\n\r\n          case \"starttime\": \r\n          const [hours, minutes] = e.target.value.split(':');\r\n          console.log(\"time : \" + e.target.value + \" number : \" + Number(hours*3600+minutes*60));\r\n          copycfg.starttime = Number(e.target.value); break;\r\n          case \"endtime\": copycfg.endtime = Number(e.target.value); break;\r\n\r\n\r\n        }\r\n\r\n       \r\n\r\n        if (e.target.name === \"devcheck\") {\r\n          let isexist = false;\r\n          for (let i = 0; i < copycfg.devids.length; i++) {\r\n            if (copycfg.devids[i] === Number(e.target.id)) {\r\n              if (e.target.checked === false) {\r\n                copycfg.devids.splice(i, 1);\r\n                return;\r\n              } else {\r\n                isexist = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          //새로추가\r\n          if (isexist === false) {\r\n            copycfg.devids.push(Number(e.target.id));\r\n          }\r\n        }\r\n      }\r\n\r\n      function sensorselectbox(mitem) {\r\n        return (\r\n          <ui>\r\n            <input type=\"radio\" key={mydata.mConfig.uniqid} name=\"sensorsel\" defaultChecked={mitem.seleted} id={mitem.uniqkey} />\r\n            {mitem.title}\r\n          </ui>\r\n        );\r\n      }\r\n\r\n      function devicecheckbox(mitem) {\r\n        return (\r\n          <ui>\r\n            <input type=\"checkbox\" key={mydata.mConfig.uniqid} name=\"devcheck\" defaultChecked={mitem.seleted} id={mitem.uniqkey} />\r\n            {mitem.title}\r\n          </ui>\r\n        );\r\n      }\r\n\r\n      let slist = [];\r\n      for (const ss of msensorlist) {\r\n        let seleted = false;\r\n        if (mydata.mConfig.sensorid === ss.UniqID) {\r\n          console.log(\"select sensorid : \" + ss.UniqID);\r\n          seleted = true;\r\n        }\r\n        const title = ss.Name + \"(노드:\" + ss.nodeID + \" , 채널 :\" + ss.channel + \")\";\r\n        const uniqkey = ss.UniqID;\r\n        slist.push({ title: title, seleted: seleted, uniqkey: uniqkey });\r\n      }\r\n\r\n      let dlist = [];\r\n      for (const dev of mdevlist) {\r\n        let seleted = false;\r\n\r\n        for (const di of mydata.mConfig.devids) {\r\n          if (di === dev.UniqID) {\r\n            console.log(\"select dev id : \" + dev.UniqID);\r\n            seleted = true;\r\n            break;\r\n          }\r\n        }\r\n        const title = dev.Name + \"( 채널 :\" + dev.Channel + \")\";\r\n        const uniqkey = dev.UniqID;\r\n\r\n        dlist.push({ title: title, seleted: seleted, uniqkey: uniqkey });\r\n      }\r\n\r\n      return (\r\n        <div className=\"autosetupbox\">\r\n          <ul>{endtime_sec}</ul>\r\n          <label>이름: </label>\r\n          <input type=\"text\" key={\"name\" + mydata.mConfig.uniqid} defaultValue={mydata.mConfig.name} name=\"name\" onChange={inputonchangeHandler} />\r\n\r\n          <label>시작시간: </label>\r\n          <input type=\"time\" key={\"starttime\" + mydata.mConfig.uniqid} defaultValue={secToTime(mydata.mConfig.starttime)} name=\"starttime\" onChange={inputonchangeHandler} />\r\n          <label>종료시간: </label>\r\n          <input type=\"time\" key={\"endtime\" + mydata.mConfig.uniqid} defaultValue={secToTime(mydata.mConfig.endtime)} name=\"endtime\" onChange={inputonchangeHandler} />\r\n          <p></p>\r\n\r\n\r\n\r\n          <div className=\"outportselectbox\" onChange={inputonchangeHandler}>\r\n            {dlist.map((localState, index) => devicecheckbox(localState))}\r\n          </div>\r\n\r\n          <div className=\"sensorselectbox\" onChange={inputonchangeHandler}>\r\n            {slist.map((localState, index) => sensorselectbox(localState))}\r\n          </div>\r\n\r\n          <label>켜짐조건: </label>\r\n          <input type=\"number\" key={\"onvalue\" + mydata.mConfig.uniqid} defaultValue={mydata.mConfig.onvalue} name=\"onvalue\" onChange={inputonchangeHandler} />\r\n          <label>꺼짐조건: </label>\r\n          <input type=\"number\" key={\"offvalue\" + mydata.mConfig.uniqid} defaultValue={mydata.mConfig.offvalue} name=\"offvalue\" onChange={inputonchangeHandler} />\r\n          <p></p>\r\n\r\n          <button onClick={() => setupSave(copycfg)} id=\"editcheck\"> 저장    </button>\r\n          <button onClick={() => setupselected(null)} id=\"editcheck\">취소    </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  function autocontrolbox(mydata) {\r\n    return (\r\n      <div className=\"autocontrolbox\">\r\n        <ui> ... ...............</ui>\r\n        <ui>{mydata.mConfig.name}</ui>\r\n        <span> </span>\r\n        <ui>{mydata.mConfig.enabled == true ? \"작동중\" : \"정지됨\"}</ui>\r\n        <button onClick={() => setupselected(mydata)} id=\"editcheck\"> 수정 </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>Autocontrol Page</h4>\r\n      <div className=\"controltop\">\r\n        정렬 :\r\n        <select name=\"pets\" id=\"pet-select\">\r\n          <option value=\"1\">시간순서</option>\r\n          <option value=\"2\">이름순서</option>\r\n          <option value=\"3\">카테고리</option>\r\n        </select>\r\n        <button>+ 추가</button>\r\n      </div>\r\n      <div className=\"autocontroltable\">\r\n        {autocontroleditbox(mSelecteditem, mSensors, mDevices)}\r\n        {mAutolist.map((localState, index) => autocontrolbox(localState))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Autocontrolpage;\r\n"]},"metadata":{},"sourceType":"module"}