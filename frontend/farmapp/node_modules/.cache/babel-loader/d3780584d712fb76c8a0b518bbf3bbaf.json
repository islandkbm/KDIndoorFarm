{"ast":null,"code":"const AutoControlStatus = require(\"./autocontrolstatus\");\n\nconst AutoControlconfig = require(\"./autocontrolconfig\");\n\nmodule.exports = class AutoControl {\n  constructor(mconfig) {\n    this.mConfig = mconfig;\n    this.mState = new AutoControlStatus();\n  }\n\n  static Clonbyjsonobj(mobj) {\n    return new AutoControl(mobj.mConfig);\n  } //테스트용 나중에 삭제..\n\n\n  controlbypwm() {\n    let mstatus = true;\n\n    if (this.mState.pwmonoffstate == true) {\n      this.mState.pwmontime_count++;\n\n      if (this.mState.pwmontime_count >= this.mConfig.pwmontime) {\n        this.mState.pwmofftime_count = 0;\n        this.mState.pwmonoffstate = false;\n      }\n\n      mstatus = true;\n    } else {\n      this.mState.pwmofftime_count++;\n\n      if (this.mState.pwmofftime_count >= this.mConfig.pwmofftime) {\n        this.mState.pwmontime_count = 0;\n        this.mState.pwmonoffstate = true;\n      }\n\n      mstatus = false;\n    }\n\n    return mstatus;\n  }\n\n  controlbytimer() {\n    return true;\n  }\n\n  controlbysensor(msensors) {\n    let mstatus = null;\n\n    for (const ms of msensors) {\n      if (ms.UniqID === this.mConfig.sensorid) {\n        if (this.mConfig.condition == \"up\") {\n          if (ms.value > this.mConfig.onvalue) {\n            mstatus = true;\n          } else {\n            if (ms.value < this.mConfig.offvalue) {\n              mstatus = false;\n            }\n          }\n        } else {\n          if (ms.value < this.mConfig.onvalue) {\n            mstatus = true;\n          } else {\n            if (ms.value > this.mConfig.offvalue) {\n              mstatus = false;\n            }\n          }\n        }\n\n        break;\n      }\n    }\n\n    return mstatus;\n  } //자동제어로 동작한후 상태가 변경되면  true  리턴\n\n\n  ischangebycontrol(msensors, timesecnow) {\n    let mstatus = false;\n\n    if (this.mConfig.enabled === false) {\n      return false;\n    }\n\n    if (timesecnow >= this.mConfig.starttime && timesecnow < this.mConfig.endtime) {\n      if (this.istimer === true) {\n        mstatus = this.controlbytimer();\n      } else if (this.mConfig.pwmcontrolenable === true) {\n        mstatus = this.controlbypwm();\n      } else {\n        mstatus = this.controlbysensor(msensors);\n      }\n    } else {\n      mstatus = false;\n    }\n\n    return this.mState.ischangestatecheck(mstatus);\n  }\n\n};","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/commonjs/autocontrol.js"],"names":["AutoControlStatus","require","AutoControlconfig","module","exports","AutoControl","constructor","mconfig","mConfig","mState","Clonbyjsonobj","mobj","controlbypwm","mstatus","pwmonoffstate","pwmontime_count","pwmontime","pwmofftime_count","pwmofftime","controlbytimer","controlbysensor","msensors","ms","UniqID","sensorid","condition","value","onvalue","offvalue","ischangebycontrol","timesecnow","enabled","starttime","endtime","istimer","pwmcontrolenable","ischangestatecheck"],"mappings":"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","sourcesContent":["\r\nconst AutoControlStatus = require(\"./autocontrolstatus\");\r\nconst AutoControlconfig = require(\"./autocontrolconfig\");\r\n\r\nmodule.exports = class AutoControl {\r\n  constructor(mconfig) {\r\n    this.mConfig = mconfig;\r\n    this.mState = new AutoControlStatus();\r\n  }\r\n\r\n  static Clonbyjsonobj(mobj) {\r\n    return new AutoControl(mobj.mConfig);\r\n  }\r\n\r\n  //테스트용 나중에 삭제..\r\n  controlbypwm() {\r\n    let mstatus = true;\r\n\r\n    if (this.mState.pwmonoffstate == true) {\r\n      this.mState.pwmontime_count++;\r\n      if (this.mState.pwmontime_count >= this.mConfig.pwmontime) {\r\n        this.mState.pwmofftime_count = 0;\r\n        this.mState.pwmonoffstate = false;\r\n      }\r\n      mstatus = true;\r\n    } else {\r\n      this.mState.pwmofftime_count++;\r\n      if (this.mState.pwmofftime_count >= this.mConfig.pwmofftime) {\r\n        this.mState.pwmontime_count = 0;\r\n        this.mState.pwmonoffstate = true;\r\n      }\r\n\r\n      mstatus = false;\r\n    }\r\n\r\n    return mstatus;\r\n  }\r\n  controlbytimer() {\r\n    return true;\r\n  }\r\n  controlbysensor(msensors) {\r\n    let mstatus = null;\r\n\r\n    for (const ms of msensors) {\r\n      if (ms.UniqID === this.mConfig.sensorid) {\r\n        if (this.mConfig.condition == \"up\") {\r\n          if (ms.value > this.mConfig.onvalue) {\r\n            mstatus = true;\r\n          } else {\r\n            if (ms.value < this.mConfig.offvalue) {\r\n              mstatus = false;\r\n            }\r\n          }\r\n        } else {\r\n          if (ms.value < this.mConfig.onvalue) {\r\n            mstatus = true;\r\n          } else {\r\n            if (ms.value > this.mConfig.offvalue) {\r\n              mstatus = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return mstatus;\r\n  }\r\n  //자동제어로 동작한후 상태가 변경되면  true  리턴\r\n  ischangebycontrol(msensors, timesecnow) {\r\n    let mstatus = false;\r\n    if (this.mConfig.enabled === false) {\r\n      return false;\r\n    }\r\n\r\n    if (timesecnow >= this.mConfig.starttime && timesecnow < this.mConfig.endtime) {\r\n      if (this.istimer === true) {\r\n        mstatus = this.controlbytimer();\r\n      } else if (this.mConfig.pwmcontrolenable === true) {\r\n        mstatus = this.controlbypwm();\r\n      } else {\r\n        mstatus = this.controlbysensor(msensors);\r\n      }\r\n    } else {\r\n      mstatus = false;\r\n    }\r\n    return this.mState.ischangestatecheck(mstatus);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}