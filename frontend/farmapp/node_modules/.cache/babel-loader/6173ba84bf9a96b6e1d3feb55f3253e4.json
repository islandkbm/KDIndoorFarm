{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport Sensordisplay from \"../sensordisplay\";\nimport Outputdevicedisplay from \"../outputdevicedisplay\";\nimport IndoorFarmAPI from \"../indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [mresponse, setUpdatedata] = useState(null); //const [msensorsarray, setUpdatesensor] = useState([]);\n  //const [moutdevarray, setUpdatedevice] = useState([]);\n\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getmultiple(true, true, false).then(mrsp => {\n        setUpdatedata(mrsp); //setUpdatesensor(mrsp.Sensors);\n        //setUpdatedevice(mrsp.Outputs);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"dashboard Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorbocck\",\n      children: Sensordisplay(mresponse.Sensors, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputblock\",\n      children: Outputdevicedisplay(mresponse.Outputs, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"sOsN7xcvCO5AX+zeIqV9vSq5/E8=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/dashboard.js"],"names":["React","Component","useState","useEffect","Sensordisplay","Outputdevicedisplay","IndoorFarmAPI","Dashboard","mresponse","setUpdatedata","interval","setInterval","getmultiple","then","mrsp","clearInterval","Sensors","Outputs"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;;AAKA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,aAAZ,IAA6BP,QAAQ,CAAC,IAAD,CAA3C,CAFoB,CAIpB;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,QAAQ,GAAG,IAAf;AAEAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAI3BL,MAAAA,aAAa,CAACM,WAAd,CAA0B,IAA1B,EAA+B,IAA/B,EAAoC,KAApC,EAA2CC,IAA3C,CAAiDC,IAAD,IAAU;AACtDL,QAAAA,aAAa,CAACK,IAAD,CAAb,CADsD,CAEtD;AACA;AAEH,OALD;AAOD,KAXqB,EAWnB,IAXmB,CAAtB;AAaA,WAAO,MAAMC,aAAa,CAACL,QAAD,CAA1B;AACD,GAjBQ,EAiBN,EAjBM,CAAT;AAoBA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8BN,aAAa,CAACI,SAAS,CAACQ,OAAX,EAAmB,IAAnB;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8BX,mBAAmB,CAACG,SAAS,CAACS,OAAX,EAAmB,IAAnB;AAAjD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAnCD;;GAAMV,S;;KAAAA,S;AAqCN,eAAeA,SAAf","sourcesContent":["\r\nimport React, { Component,useState, useEffect } from \"react\";\r\nimport Sensordisplay from \"../sensordisplay\";\r\nimport Outputdevicedisplay from \"../outputdevicedisplay\";\r\nimport IndoorFarmAPI from \"../indoorfarmapi\";\r\n\r\n\r\n\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [mresponse, setUpdatedata] = useState(null);\r\n\r\n    //const [msensorsarray, setUpdatesensor] = useState([]);\r\n    //const [moutdevarray, setUpdatedevice] = useState([]);\r\n\r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n\r\n        \r\n\r\n        IndoorFarmAPI.getmultiple(true,true,false).then((mrsp) => {\r\n            setUpdatedata(mrsp);\r\n            //setUpdatesensor(mrsp.Sensors);\r\n            //setUpdatedevice(mrsp.Outputs);\r\n\r\n        });\r\n\r\n      }, 1000);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h2>dashboard Page</h2>\r\n            <div className=\"sensorbocck\">{Sensordisplay(mresponse.Sensors,true)}</div>\r\n            <div className=\"outputblock\">{Outputdevicedisplay(mresponse.Outputs,true)}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}