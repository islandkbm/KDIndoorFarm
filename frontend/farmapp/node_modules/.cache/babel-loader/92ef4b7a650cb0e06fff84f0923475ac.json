{"ast":null,"code":"import reqMessage from \"./reqMessage\"; //const  Sensordevice = require(\"./commonjs/sensordevice.js\");\n\nimport Sensordevice from \"./commonjs/sensordevice.js\";\nconst API = \"/api/\";\nexport default class IndoorFarmAPI {\n  constructor() {\n    this.abc = \"123\";\n    this.def = \"456\";\n  }\n\n  static logout(mobj) {\n    console.log(\"IndoorFarmAPI \");\n    return \"logout\";\n  }\n\n  static async postData(url = \"\", data = {}) {\n    const response = await fetch(url, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n    return response; // parses JSON response into native JavaScript objects\n  }\n\n  static async getsensordatas() {\n    var mlist = [];\n\n    try {\n      const reqmsg = new reqMessage();\n      reqmsg.getSensors = true;\n      const res = await IndoorFarmAPI.postData(API + \"getsensorstatus\", reqmsg);\n      const resdata = await res.json();\n      resdata.forEach(element => {\n        mlist.push(Sensordevice.Clonbyjsonobj(element));\n      });\n    } catch (error) {\n      console.log(\" getsensordata error : \" + error);\n    } finally {\n      console.log(\" getsensordata finally  : \" + mlist.length);\n      return mlist;\n    }\n  }\n\n  static async setmanualonoff(moutputport) {\n    var mlist = [];\n\n    try {\n      const reqmsg = new reqMessage();\n      reqmsg.setManualControl = true;\n      reqmsg.OutputManual.push(moutputport);\n      const res = await IndoorFarmAPI.postData(API + \"getsensorstatus\", reqmsg);\n      const resdata = await res.json();\n      resdata.forEach(element => {\n        mlist.push(Sensordevice.Clonbyjsonobj(element));\n      });\n    } catch (error) {\n      console.log(\" getsensordata error : \" + error);\n    } finally {\n      console.log(\" getsensordata finally  : \" + mlist.length);\n      return mlist;\n    }\n  }\n\n}","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/frontend/farmapp/src/indoorfarmapi.js"],"names":["reqMessage","Sensordevice","API","IndoorFarmAPI","abc","def","logout","mobj","console","log","postData","url","data","response","fetch","method","mode","cache","headers","body","JSON","stringify","getsensordatas","mlist","reqmsg","getSensors","res","resdata","json","forEach","element","push","Clonbyjsonobj","error","length","setmanualonoff","moutputport","setManualControl","OutputManual"],"mappings":"AACA,OAAOA,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAIA,MAAMC,GAAG,GAAG,OAAZ;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAAA;AAAA,SACjCC,GADiC,GAC3B,KAD2B;AAAA,SAEjCC,GAFiC,GAE3B,KAF2B;AAAA;;AAIpB,SAANC,MAAM,CAACC,IAAD,EAAO;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAO,QAAP;AACD;;AAEoB,eAARC,QAAQ,CAACC,GAAG,GAAG,EAAP,EAAWC,IAAI,GAAG,EAAlB,EAAsB;AACzC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAChCI,MAAAA,MAAM,EAAE,MADwB;AAChB;AAChBC,MAAAA,IAAI,EAAE,MAF0B;AAElB;AACdC,MAAAA,KAAK,EAAE,UAHyB;AAGb;AAEnBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT,CAEP;;AAFO,OALuB;AAUhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAV0B,CAUJ;;AAVI,KAAN,CAA5B;AAYA,WAAOC,QAAP,CAbyC,CAaxB;AAClB;;AAE0B,eAAdS,cAAc,GAAG;AAC5B,QAAIC,KAAK,GAAG,EAAZ;;AAEA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIxB,UAAJ,EAAf;AACAwB,MAAAA,MAAM,CAACC,UAAP,GAAoB,IAApB;AAGA,YAAMC,GAAG,GAAG,MAAMvB,aAAa,CAACO,QAAd,CAAuBR,GAAG,GAAG,iBAA7B,EAAgDsB,MAAhD,CAAlB;AACA,YAAMG,OAAO,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAtB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAiBC,OAAD,IAAa;AAC3BP,QAAAA,KAAK,CAACQ,IAAN,CAAW9B,YAAY,CAAC+B,aAAb,CAA2BF,OAA3B,CAAX;AACD,OAFD;AAGD,KAVD,CAUE,OAAOG,KAAP,EAAc;AACdzB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BwB,KAAxC;AACD,KAZD,SAYU;AACRzB,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+Bc,KAAK,CAACW,MAAjD;AACA,aAAOX,KAAP;AACD;AACF;;AAE0B,eAAdY,cAAc,CAACC,WAAD,EAAc;AAEvC,QAAIb,KAAK,GAAG,EAAZ;;AAEA,QAAI;AACF,YAAMC,MAAM,GAAG,IAAIxB,UAAJ,EAAf;AACAwB,MAAAA,MAAM,CAACa,gBAAP,GAA0B,IAA1B;AACAb,MAAAA,MAAM,CAACc,YAAP,CAAoBP,IAApB,CAAyBK,WAAzB;AAGA,YAAMV,GAAG,GAAG,MAAMvB,aAAa,CAACO,QAAd,CAAuBR,GAAG,GAAG,iBAA7B,EAAgDsB,MAAhD,CAAlB;AACA,YAAMG,OAAO,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAtB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAiBC,OAAD,IAAa;AAC3BP,QAAAA,KAAK,CAACQ,IAAN,CAAW9B,YAAY,CAAC+B,aAAb,CAA2BF,OAA3B,CAAX;AACD,OAFD;AAGD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdzB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BwB,KAAxC;AACD,KAbD,SAaU;AACRzB,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+Bc,KAAK,CAACW,MAAjD;AACA,aAAOX,KAAP;AACD;AAEF;;AApEgC","sourcesContent":["\r\nimport reqMessage from \"./reqMessage\";\r\n\r\n//const  Sensordevice = require(\"./commonjs/sensordevice.js\");\r\nimport Sensordevice from \"./commonjs/sensordevice.js\";\r\n\r\n\r\n\r\nconst API = \"/api/\";\r\n\r\nexport default class IndoorFarmAPI {\r\n  abc = \"123\";\r\n  def = \"456\";\r\n\r\n  static logout(mobj) {\r\n    console.log(\"IndoorFarmAPI \");\r\n    return \"logout\";\r\n  }\r\n\r\n  static async postData(url = \"\", data = {}) {\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    });\r\n    return response; // parses JSON response into native JavaScript objects\r\n  }\r\n\r\n  static async getsensordatas() {\r\n    var mlist = [];\r\n\r\n    try {\r\n      const reqmsg = new reqMessage();\r\n      reqmsg.getSensors = true;\r\n\r\n      \r\n      const res = await IndoorFarmAPI.postData(API + \"getsensorstatus\", reqmsg);\r\n      const resdata = await res.json();\r\n      resdata.forEach((element) => {\r\n        mlist.push(Sensordevice.Clonbyjsonobj(element));\r\n      });\r\n    } catch (error) {\r\n      console.log(\" getsensordata error : \" + error);\r\n    } finally {\r\n      console.log(\" getsensordata finally  : \" + mlist.length);\r\n      return mlist;\r\n    }\r\n  }\r\n\r\n  static async setmanualonoff(moutputport) {\r\n   \r\n    var mlist = [];\r\n\r\n    try {\r\n      const reqmsg = new reqMessage();\r\n      reqmsg.setManualControl = true;\r\n      reqmsg.OutputManual.push(moutputport);\r\n\r\n      \r\n      const res = await IndoorFarmAPI.postData(API + \"getsensorstatus\", reqmsg);\r\n      const resdata = await res.json();\r\n      resdata.forEach((element) => {\r\n        mlist.push(Sensordevice.Clonbyjsonobj(element));\r\n      });\r\n    } catch (error) {\r\n      console.log(\" getsensordata error : \" + error);\r\n    } finally {\r\n      console.log(\" getsensordata finally  : \" + mlist.length);\r\n      return mlist;\r\n    }\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}