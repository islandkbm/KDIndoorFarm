{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\autocontrolpage.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport AutoControlconfig from \"../commonjs/autocontrolconfig\";\nimport IndoorFarmAPI from \"../indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Autocontrolpage = () => {\n  _s();\n\n  const [mSensors, setUpdatesensor] = useState([]);\n  const [mAutolist, setUpdateauto] = useState([]);\n  const [mDevices, setUpdatedevice] = useState([]);\n  const [mSelecteditem, setupselected] = useState(null);\n  useEffect(() => {\n    IndoorFarmAPI.getautocontrols().then(mrsp => {\n      setUpdatesensor(mrsp.Sensors);\n      setUpdateauto(mrsp.AutoControls);\n      setUpdatedevice(mrsp.Outputs);\n    });\n  }, []);\n\n  function autocontroleditbox(mydata, msensorlist, mdevlist) {\n    if (mydata == null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }, this);\n    } else {\n      let copycfg = AutoControlconfig.deepcopy(mydata.mConfig);\n\n      function setupSave(mcfg) {\n        console.log(\"setupSave uid: \" + mcfg.uniqid + \" name : \" + mcfg.name);\n        IndoorFarmAPI.setAutocontrolsetup(mcfg).then(ret => {\n          console.log(\"setAutocontrolsetup  uid: \" + ret);\n        });\n      }\n\n      function inputonchangeHandler(e) {\n        console.log(\"inputonchangeHandler : \" + e.target.name);\n\n        if (e.target.name === \"name\") {\n          copycfg.name = e.target.value;\n        }\n\n        if (e.target.name === \"onvalue\") {\n          copycfg.onvalue = Number(e.target.value);\n        }\n\n        if (e.target.name === \"offvalue\") {\n          copycfg.offvalue = Number(e.target.value);\n        }\n\n        if (e.target.name === \"devcheck\") {\n          console.log(e.target.id);\n          console.log(e.target.value);\n        }\n      }\n\n      function sensorselectbox(mitem) {\n        return /*#__PURE__*/_jsxDEV(\"ui\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"sensorsel\",\n            defaultChecked: mitem.seleted,\n            id: mitem.uniqkey\n          }, mydata.mConfig.uniqid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 9\n          }, this), mitem.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this);\n      }\n\n      function devicecheckbox(mitem) {\n        return /*#__PURE__*/_jsxDEV(\"ui\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: \"devcheck\",\n            defaultChecked: mitem.seleted,\n            id: mitem.uniqkey\n          }, mydata.mConfig.uniqid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 9\n          }, this), mitem.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this);\n      }\n\n      let slist = [];\n\n      for (const ss of msensorlist) {\n        let seleted = false;\n\n        if (mydata.mConfig.sensorid === ss.UniqID) {\n          console.log(\"select sensorid : \" + ss.UniqID);\n          seleted = true;\n        }\n\n        const title = ss.Name + \"(노드:\" + ss.nodeID + \" , 채널 :\" + ss.channel + \")\";\n        const uniqkey = ss.UniqID;\n        slist.push({\n          \"title\": title,\n          \"seleted\": seleted,\n          \"uniqkey\": uniqkey\n        });\n      }\n\n      let dlist = [];\n\n      for (const dev of mdevlist) {\n        let seleted = false;\n\n        for (const di of mydata.mConfig.devids) {\n          if (di === dev.UniqID) {\n            console.log(\"select dev id : \" + dev.UniqID);\n            seleted = true;\n            break;\n          }\n        }\n\n        const title = dev.Name + \"( 채널 :\" + dev.Channel + \")\";\n        const uniqkey = dev.UniqID;\n        dlist.push({\n          \"title\": title,\n          \"seleted\": seleted,\n          \"uniqkey\": uniqkey\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autosetupbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mydata.mConfig.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uC774\\uB984: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          defaultValue: mydata.mConfig.name,\n          name: \"name\",\n          onChange: inputonchangeHandler\n        }, \"name\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [\"asdf \", mydata.mConfig.devids[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"outportselectbox\",\n          onChange: inputonchangeHandler,\n          children: dlist.map((localState, index) => devicecheckbox(localState))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sensorselectbox\",\n          onChange: inputonchangeHandler,\n          children: slist.map((localState, index) => sensorselectbox(localState))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uCF1C\\uC9D0\\uC870\\uAC74: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: mydata.mConfig.onvalue,\n          name: \"onvalue\",\n          onChange: inputonchangeHandler\n        }, \"onvalue\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uAEBC\\uC9D0\\uC870\\uAC74: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: mydata.mConfig.offvalue,\n          name: \"offvalue\",\n          onChange: inputonchangeHandler\n        }, \"offvalue\" + mydata.mConfig.uniqid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setupSave(copycfg),\n          id: \"editcheck\",\n          children: [\" \", \"\\uC800\\uC7A5\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setupselected(null),\n          id: \"editcheck\",\n          children: [\" \", \"\\uCDE8\\uC18C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  function autocontrolbox(mydata) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocontrolbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"ui\", {\n        children: \" ... ...............\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ui\", {\n        children: mydata.mConfig.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ui\", {\n        children: mydata.mConfig.enabled == true ? \"작동중\" : \"정지됨\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setupselected(mydata),\n        id: \"editcheck\",\n        children: [\" \", \"\\uC218\\uC815\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Autocontrol Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controltop\",\n      children: [\"\\uC815\\uB82C :\", /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"pets\",\n        id: \"pet-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"1\",\n          children: \"\\uC2DC\\uAC04\\uC21C\\uC11C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"2\",\n          children: \"\\uC774\\uB984\\uC21C\\uC11C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"3\",\n          children: \"\\uCE74\\uD14C\\uACE0\\uB9AC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"+ \\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocontroltable\",\n      children: [autocontroleditbox(mSelecteditem, mSensors, mDevices), mAutolist.map((localState, index) => autocontrolbox(localState))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Autocontrolpage, \"20OoqUTIIBIiutOSzshmewZvWQU=\");\n\n_c = Autocontrolpage;\nexport default Autocontrolpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocontrolpage\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/autocontrolpage.js"],"names":["React","Component","useState","useEffect","AutoControlconfig","IndoorFarmAPI","Autocontrolpage","mSensors","setUpdatesensor","mAutolist","setUpdateauto","mDevices","setUpdatedevice","mSelecteditem","setupselected","getautocontrols","then","mrsp","Sensors","AutoControls","Outputs","autocontroleditbox","mydata","msensorlist","mdevlist","copycfg","deepcopy","mConfig","setupSave","mcfg","console","log","uniqid","name","setAutocontrolsetup","ret","inputonchangeHandler","e","target","value","onvalue","Number","offvalue","id","sensorselectbox","mitem","seleted","uniqkey","title","devicecheckbox","slist","ss","sensorid","UniqID","Name","nodeID","channel","push","dlist","dev","di","devids","Channel","map","localState","index","autocontrolbox","enabled"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAE5B,QAAM,CAACC,QAAD,EAAWC,eAAX,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,SAAD,EAAYC,aAAZ,IAA6BR,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACS,QAAD,EAAWC,eAAX,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,aAAD,EAAgBC,aAAhB,IAAiCZ,QAAQ,CAAC,IAAD,CAA/C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,aAAa,CAACU,eAAd,GAAgCC,IAAhC,CAAsCC,IAAD,IAAU;AAE7CT,MAAAA,eAAe,CAACS,IAAI,CAACC,OAAN,CAAf;AACAR,MAAAA,aAAa,CAACO,IAAI,CAACE,YAAN,CAAb;AACAP,MAAAA,eAAe,CAACK,IAAI,CAACG,OAAN,CAAf;AAED,KAND;AAOD,GARQ,EAQN,EARM,CAAT;;AAaA,WAASC,kBAAT,CAA4BC,MAA5B,EAAmCC,WAAnC,EAA+CC,QAA/C,EAAyD;AAKvD,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,0BAAO;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AAEL,UAAIG,OAAO,GAAIrB,iBAAiB,CAACsB,QAAlB,CAA2BJ,MAAM,CAACK,OAAlC,CAAf;;AAGA,eAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvBC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAmBF,IAAI,CAACG,MAAxB,GAAiC,UAAjC,GAA8CH,IAAI,CAACI,IAA/D;AACA5B,QAAAA,aAAa,CAAC6B,mBAAd,CAAkCL,IAAlC,EAAwCb,IAAxC,CAA8CmB,GAAD,IAAS;AAEpDL,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAA8BI,GAA1C;AAED,SAJD;AAMD;;AAGD,eAASC,oBAAT,CAA8BC,CAA9B,EACF;AACEP,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BM,CAAC,CAACC,MAAF,CAASL,IAAjD;;AAEA,YAAII,CAAC,CAACC,MAAF,CAASL,IAAT,KAAiB,MAArB,EAA4B;AAAIR,UAAAA,OAAO,CAACQ,IAAR,GAAeI,CAAC,CAACC,MAAF,CAASC,KAAxB;AAAgC;;AAChE,YAAIF,CAAC,CAACC,MAAF,CAASL,IAAT,KAAiB,SAArB,EAA+B;AAAIR,UAAAA,OAAO,CAACe,OAAR,GAAkBC,MAAM,CAACJ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxB;AAA2C;;AAC9E,YAAIF,CAAC,CAACC,MAAF,CAASL,IAAT,KAAiB,UAArB,EAAgC;AAAIR,UAAAA,OAAO,CAACiB,QAAR,GAAkBD,MAAM,CAAEJ,CAAC,CAACC,MAAF,CAASC,KAAX,CAAxB;AAA4C;;AAEhF,YAAIF,CAAC,CAACC,MAAF,CAASL,IAAT,KAAiB,UAArB,EAAgC;AAC9BH,UAAAA,OAAO,CAACC,GAAR,CAAYM,CAAC,CAACC,MAAF,CAASK,EAArB;AACAb,UAAAA,OAAO,CAACC,GAAR,CAAYM,CAAC,CAACC,MAAF,CAASC,KAArB;AAGA;AAKH;;AAED,eAASK,eAAT,CAAyBC,KAAzB,EACA;AACE,4BACE;AAAA,kCACA;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAgD,YAAA,IAAI,EAAC,WAArD;AAAiE,YAAA,cAAc,EAAEA,KAAK,CAACC,OAAvF;AAAgG,YAAA,EAAE,EAAED,KAAK,CAACE;AAA1G,aAAyBzB,MAAM,CAACK,OAAP,CAAeK,MAAxC;AAAA;AAAA;AAAA;AAAA,kBADA,EAEGa,KAAK,CAACG,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD;;AAGD,eAASC,cAAT,CAAwBJ,KAAxB,EACA;AACE,4BACE;AAAA,kCACA;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAmD,YAAA,IAAI,EAAC,UAAxD;AAAmE,YAAA,cAAc,EAAEA,KAAK,CAACC,OAAzF;AAAkG,YAAA,EAAE,EAAED,KAAK,CAACE;AAA5G,aAA4BzB,MAAM,CAACK,OAAP,CAAeK,MAA3C;AAAA;AAAA;AAAA;AAAA,kBADA,EAEGa,KAAK,CAACG,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD;;AAGD,UAAIE,KAAK,GAAC,EAAV;;AACE,WAAI,MAAMC,EAAV,IAAgB5B,WAAhB,EACA;AACE,YAAIuB,OAAO,GAAE,KAAb;;AACA,YAAGxB,MAAM,CAACK,OAAP,CAAeyB,QAAf,KAA8BD,EAAE,CAACE,MAApC,EACA;AACEvB,UAAAA,OAAO,CAACC,GAAR,CAAa,uBAAqBoB,EAAE,CAACE,MAArC;AACAP,UAAAA,OAAO,GAAC,IAAR;AACD;;AACD,cAAME,KAAK,GAACG,EAAE,CAACG,IAAH,GAAW,MAAX,GAAkBH,EAAE,CAACI,MAArB,GAA6B,SAA7B,GAAwCJ,EAAE,CAACK,OAA3C,GAAmD,GAA/D;AACA,cAAMT,OAAO,GAACI,EAAE,CAACE,MAAjB;AACAH,QAAAA,KAAK,CAACO,IAAN,CAAW;AAAC,mBAAQT,KAAT;AAAe,qBAAUF,OAAzB;AAAmC,qBAAUC;AAA7C,SAAX;AAED;;AAED,UAAIW,KAAK,GAAC,EAAV;;AACA,WAAI,MAAMC,GAAV,IAAiBnC,QAAjB,EACA;AACE,YAAIsB,OAAO,GAAE,KAAb;;AAEA,aAAK,MAAMc,EAAX,IAAiBtC,MAAM,CAACK,OAAP,CAAekC,MAAhC,EACA;AACE,cAAID,EAAE,KAAMD,GAAG,CAACN,MAAhB,EACA;AACEvB,YAAAA,OAAO,CAACC,GAAR,CAAa,qBAAmB4B,GAAG,CAACN,MAApC;AACAP,YAAAA,OAAO,GAAC,IAAR;AACA;AACD;AACF;;AACD,cAAME,KAAK,GAACW,GAAG,CAACL,IAAJ,GAAW,QAAX,GAAqBK,GAAG,CAACG,OAAzB,GAAiC,GAA7C;AACA,cAAMf,OAAO,GAACY,GAAG,CAACN,MAAlB;AAEAK,QAAAA,KAAK,CAACD,IAAN,CAAW;AAAC,mBAAQT,KAAT;AAAe,qBAAUF,OAAzB;AAAkC,qBAAUC;AAA5C,SAAX;AAED;;AAKD,0BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAA,oBAAKzB,MAAM,CAACK,OAAP,CAAeM;AAApB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAuD,UAAA,YAAY,EAAEX,MAAM,CAACK,OAAP,CAAeM,IAApF;AAA2F,UAAA,IAAI,EAAC,MAAhG;AAAuG,UAAA,QAAQ,EAAEG;AAAjH,WAAyB,SAAOd,MAAM,CAACK,OAAP,CAAeK,MAA/C;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,8BAAUV,MAAM,CAACK,OAAP,CAAekC,MAAf,CAAsB,CAAtB,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAME;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAkC,UAAA,QAAQ,EAAEzB,oBAA5C;AAAA,oBACCsB,KAAK,CAACK,GAAN,CAAU,CAACC,UAAD,EAAaC,KAAb,KAAwBhB,cAAc,CAACe,UAAD,CAAhD;AADD;AAAA;AAAA;AAAA;AAAA,gBANF,eAYE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAiC,UAAA,QAAQ,EAAE5B,oBAA3C;AAAA,oBACCc,KAAK,CAACa,GAAN,CAAU,CAACC,UAAD,EAAaC,KAAb,KAAwBrB,eAAe,CAACoB,UAAD,CAAjD;AADD;AAAA;AAAA;AAAA;AAAA,gBAZF,eAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBF,eAsBE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAA4D,UAAA,YAAY,EAAE1C,MAAM,CAACK,OAAP,CAAea,OAAzF;AAAmG,UAAA,IAAI,EAAC,SAAxG;AAAkH,UAAA,QAAQ,EAAEJ;AAA5H,WAA2B,YAAUd,MAAM,CAACK,OAAP,CAAeK,MAApD;AAAA;AAAA;AAAA;AAAA,gBAtBF,eAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF,eAwBE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAA6D,UAAA,YAAY,EAAEV,MAAM,CAACK,OAAP,CAAee,QAA1F;AAAqG,UAAA,IAAI,EAAC,UAA1G;AAAqH,UAAA,QAAQ,EAAEN;AAA/H,WAA2B,aAAWd,MAAM,CAACK,OAAP,CAAeK,MAArD;AAAA;AAAA;AAAA;AAAA,gBAxBF,eAyBE;AAAA;AAAA;AAAA;AAAA,gBAzBF,eA2BE;AAAQ,UAAA,OAAO,EAAE,MAAMJ,SAAS,CAACH,OAAD,CAAhC;AAA2C,UAAA,EAAE,EAAC,WAA9C;AAAA,qBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BF,eAgCE;AAAQ,UAAA,OAAO,EAAE,MAAMX,aAAa,CAAC,IAAD,CAApC;AAA4C,UAAA,EAAE,EAAC,WAA/C;AAAA,qBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhCF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAuCD;AACF;;AACD,WAASoD,cAAT,CAAwB5C,MAAxB,EAAgC;AAE9B,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKA,MAAM,CAACK,OAAP,CAAeM;AAApB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAKX,MAAM,CAACK,OAAP,CAAewC,OAAf,IAA0B,IAA1B,GAAiC,KAAjC,GAAyC;AAA9C;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAQ,QAAA,OAAO,EAAE,MAAOrD,aAAa,CAACQ,MAAD,CAArC;AAA+C,QAAA,EAAE,EAAC,WAAlD;AAAA,mBACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gDAEE;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,EAAE,EAAC,YAAvB;AAAA,gCACE;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,iBACGD,kBAAkB,CAACR,aAAD,EAAeN,QAAf,EAAwBI,QAAxB,CADrB,EAGGF,SAAS,CAACsD,GAAV,CAAc,CAACC,UAAD,EAAaC,KAAb,KAAuBC,cAAc,CAACF,UAAD,CAAnD,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAxMD;;GAAM1D,e;;KAAAA,e;AA0MN,eAAeA,eAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport AutoControlconfig from \"../commonjs/autocontrolconfig\";\r\nimport IndoorFarmAPI from \"../indoorfarmapi\";\r\n\r\nconst Autocontrolpage = () => {\r\n  \r\n  const [mSensors, setUpdatesensor] = useState([]);\r\n  const [mAutolist, setUpdateauto] = useState([]);\r\n  const [mDevices, setUpdatedevice] = useState([]);\r\n  const [mSelecteditem, setupselected] = useState(null);\r\n\r\n  useEffect(() => {\r\n    IndoorFarmAPI.getautocontrols().then((mrsp) => {\r\n  \r\n      setUpdatesensor(mrsp.Sensors);\r\n      setUpdateauto(mrsp.AutoControls);\r\n      setUpdatedevice(mrsp.Outputs);\r\n      \r\n    });\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  function autocontroleditbox(mydata,msensorlist,mdevlist) {\r\n\r\n    \r\n  \r\n    \r\n    if (mydata == null) {\r\n      return <div></div>;\r\n    } else {\r\n\r\n      let copycfg =  AutoControlconfig.deepcopy(mydata.mConfig);\r\n    \r\n      \r\n      function setupSave(mcfg) {\r\n        console.log(\"setupSave uid: \" +mcfg.uniqid + \" name : \" + mcfg.name);\r\n        IndoorFarmAPI.setAutocontrolsetup(mcfg).then((ret) => {\r\n          \r\n          console.log(\"setAutocontrolsetup  uid: \" +ret);\r\n\r\n        });\r\n      \r\n      }\r\n  \r\n      \r\n      function inputonchangeHandler(e)\r\n    {\r\n      console.log(\"inputonchangeHandler : \" + e.target.name);\r\n\r\n      if( e.target.name ===\"name\"){   copycfg.name = e.target.value; }\r\n      if( e.target.name ===\"onvalue\"){   copycfg.onvalue = Number(e.target.value); }\r\n      if( e.target.name ===\"offvalue\"){   copycfg.offvalue =Number( e.target.value); }\r\n      \r\n      if( e.target.name ===\"devcheck\"){   \r\n        console.log(e.target.id );\r\n        console.log(e.target.value);\r\n        \r\n\r\n       }\r\n\r\n      \r\n\r\n\r\n    }\r\n\r\n    function sensorselectbox(mitem)\r\n    {\r\n      return (\r\n        <ui>\r\n        <input type=\"radio\" key={mydata.mConfig.uniqid} name=\"sensorsel\" defaultChecked={mitem.seleted} id={mitem.uniqkey}/>\r\n          {mitem.title}\r\n          </ui>\r\n      );\r\n    }\r\n\r\n    \r\n    function devicecheckbox(mitem)\r\n    {\r\n      return (\r\n        <ui>\r\n        <input type=\"checkbox\" key={mydata.mConfig.uniqid} name=\"devcheck\" defaultChecked={mitem.seleted} id={mitem.uniqkey} />\r\n          {mitem.title}\r\n          </ui>\r\n      );\r\n    }\r\n\r\n\r\n    let slist=[];\r\n      for(const ss of msensorlist)\r\n      {\r\n        let seleted= false;\r\n        if(mydata.mConfig.sensorid   === ss.UniqID)\r\n        {\r\n          console.log( \"select sensorid : \"+ss.UniqID);\r\n          seleted=true;\r\n        }\r\n        const title=ss.Name  + \"(노드:\"+ss.nodeID +\" , 채널 :\"+ ss.channel+\")\";\r\n        const uniqkey=ss.UniqID;\r\n        slist.push({\"title\":title,\"seleted\":seleted , \"uniqkey\":uniqkey});\r\n\r\n      }\r\n      \r\n      let dlist=[];\r\n      for(const dev of mdevlist)\r\n      {\r\n        let seleted= false;\r\n\r\n        for( const di of mydata.mConfig.devids)\r\n        {\r\n          if( di  === dev.UniqID)\r\n          {\r\n            console.log( \"select dev id : \"+dev.UniqID);\r\n            seleted=true;\r\n            break;\r\n          }\r\n        }\r\n        const title=dev.Name + \"( 채널 :\"+ dev.Channel+\")\";\r\n        const uniqkey=dev.UniqID;\r\n\r\n        dlist.push({\"title\":title,\"seleted\":seleted, \"uniqkey\":uniqkey });\r\n\r\n      }\r\n      \r\n\r\n      \r\n\r\n      return (\r\n        <div className=\"autosetupbox\">\r\n          <ul>{mydata.mConfig.name}</ul>\r\n          <label>이름: </label>\r\n          <input type=\"text\" key ={\"name\"+mydata.mConfig.uniqid} defaultValue={mydata.mConfig.name}  name=\"name\" onChange={inputonchangeHandler} />\r\n          <ul>asdf {mydata.mConfig.devids[0]}</ul>\r\n\r\n          <div className=\"outportselectbox\" onChange={inputonchangeHandler}>\r\n          {dlist.map((localState, index) =>  devicecheckbox(localState))}\r\n          </div>\r\n          \r\n\r\n\r\n          <div className=\"sensorselectbox\" onChange={inputonchangeHandler}>\r\n          {slist.map((localState, index) =>  sensorselectbox(localState))}\r\n          </div>\r\n          \r\n          \r\n\r\n           \r\n\r\n\r\n          <label>켜짐조건: </label>\r\n          <input type=\"number\" key ={\"onvalue\"+mydata.mConfig.uniqid} defaultValue={mydata.mConfig.onvalue}  name=\"onvalue\" onChange={inputonchangeHandler} />\r\n          <label>꺼짐조건: </label>\r\n          <input type=\"number\" key ={\"offvalue\"+mydata.mConfig.uniqid} defaultValue={mydata.mConfig.offvalue}  name=\"offvalue\" onChange={inputonchangeHandler} />\r\n          <p></p>\r\n\r\n          <button onClick={() => setupSave(copycfg)} id=\"editcheck\">\r\n            {\" \"}\r\n            저장\r\n          </button>\r\n\r\n          <button onClick={() => setupselected(null)} id=\"editcheck\">\r\n            {\" \"}\r\n            취소\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  function autocontrolbox(mydata) {\r\n    \r\n    return (\r\n      <div className=\"autocontrolbox\">\r\n        <ui> ... ...............</ui>\r\n        <ui>{mydata.mConfig.name}</ui>\r\n        <span> </span>\r\n        <ui>{mydata.mConfig.enabled == true ? \"작동중\" : \"정지됨\"}</ui>\r\n        <button onClick={() =>  setupselected(mydata)} id=\"editcheck\">\r\n          {\" \"}\r\n          수정\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>Autocontrol Page</h4>\r\n      <div className=\"controltop\">\r\n        정렬 :\r\n        <select name=\"pets\" id=\"pet-select\">\r\n          <option value=\"1\">시간순서</option>\r\n          <option value=\"2\">이름순서</option>\r\n          <option value=\"3\">카테고리</option>\r\n        </select>\r\n        <button>+ 추가</button>\r\n      </div>\r\n      <div className=\"autocontroltable\">\r\n        {autocontroleditbox(mSelecteditem,mSensors,mDevices)}\r\n\r\n        {mAutolist.map((localState, index) => autocontrolbox(localState))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Autocontrolpage;\r\n"]},"metadata":{},"sourceType":"module"}