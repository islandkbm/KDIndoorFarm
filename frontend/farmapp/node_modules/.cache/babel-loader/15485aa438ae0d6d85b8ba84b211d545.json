{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\sensordisplay.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SensorBox(msensor) {\n  let cname = \"sen_con\";\n  let svalue;\n  let iconsrc = \"./image/sensor_\" + msensor.Sensortype + \".png\";\n\n  if (msensor.errorcount > 30) {\n    cname = \"sen_dis\";\n    svalue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sen_result\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"blinking\",\n        children: \"\\uC5F0\\uACB0\\uB04A\\uAE40\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  } else {\n    svalue = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sen_value\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"value\",\n        children: msensor.valuestring\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"unit\",\n        children: \" \" + msensor.ValueUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cname,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sen_name\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: iconsrc,\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 34\n      }, this), \" \", msensor.Name, \"      \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), svalue]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SensorBox;\n\nfunction Sensordisplay(msensorsarray, isonlystatus) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor\",\n    children: msensorsarray.map((localState, index) => SensorBox(localState))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = Sensordisplay;\nexport default Sensordisplay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SensorBox\");\n$RefreshReg$(_c2, \"Sensordisplay\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/sensordisplay.js"],"names":["React","SensorBox","msensor","cname","svalue","iconsrc","Sensortype","errorcount","valuestring","ValueUnit","Name","Sensordisplay","msensorsarray","isonlystatus","map","localState","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,MAAIC,KAAK,GAAG,SAAZ;AACA,MAAIC,MAAJ;AACA,MAAIC,OAAO,GAAG,oBAAoBH,OAAO,CAACI,UAA5B,GAAyC,MAAvD;;AAEA,MAAIJ,OAAO,CAACK,UAAR,GAAqB,EAAzB,EAA6B;AAC3BJ,IAAAA,KAAK,GAAG,SAAR;AACAC,IAAAA,MAAM,gBACJ;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,iBACG,GADH,eAEE;AAAM,QAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAEyC,GAFzC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD,GARD,MAQO;AACLA,IAAAA,MAAM,gBACJ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,kBAA0BF,OAAO,CAACM;AAAlC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,SAAS,EAAC,MAAjB;AAAA,kBAAyB,MAAMN,OAAO,CAACO;AAAvC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEN,KAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,mCAA2B;AAAK,QAAA,GAAG,EAAEE,OAAV;AAAmB,QAAA,SAAS,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,cAA3B,OAAmEH,OAAO,CAACQ,IAA3E;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGN,MAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KA5BQH,S;;AA8BT,SAASU,aAAT,CAAuBC,aAAvB,EAAsCC,YAAtC,EAAoD;AAClD,sBACA;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,cACGD,aAAa,CAACE,GAAd,CAAkB,CAACC,UAAD,EAAaC,KAAb,KAAuBf,SAAS,CAACc,UAAD,CAAlD;AADH;AAAA;AAAA;AAAA;AAAA,UADA;AAID;;MALQJ,a;AAOT,eAAeA,aAAf","sourcesContent":["import React from \"react\";\r\n\r\nfunction SensorBox(msensor) {\r\n  let cname = \"sen_con\";\r\n  let svalue;\r\n  let iconsrc = \"./image/sensor_\" + msensor.Sensortype + \".png\";\r\n\r\n  if (msensor.errorcount > 30) {\r\n    cname = \"sen_dis\";\r\n    svalue = (\r\n      <div className=\"sen_result\">\r\n        {\" \"}\r\n        <span className=\"blinking\">연결끊김</span>{\" \"}\r\n      </div>\r\n    );\r\n  } else {\r\n    svalue = (\r\n      <div className=\"sen_value\">\r\n        <label className=\"value\">{msensor.valuestring}</label>\r\n        <label className=\"unit\">{\" \" + msensor.ValueUnit}</label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cname}>\r\n      <div className=\"sen_name\"> <img src={iconsrc} className=\"icon\" /> {msensor.Name}      </div>\r\n      {svalue}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Sensordisplay(msensorsarray, isonlystatus) {\r\n  return( \r\n  <div className=\"sensor\">\r\n    {msensorsarray.map((localState, index) => SensorBox(localState))}\r\n    </div>);\r\n}\r\n\r\nexport default Sensordisplay;\r\n"]},"metadata":{},"sourceType":"module"}