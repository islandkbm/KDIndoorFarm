{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport manualMessage from \"./manualmessage\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport Sensordisplay from \"./sensordisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OutputBox extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"============= onoff : \" + this.props.data.Status);\n  }\n\n  render() {\n    let manualbutton = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uC790\\uB3D9\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.props.data.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.Status, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.Autocontrolid, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction setmanual(mydata) {\n  console.log(\"setmanual 01 : \" + mydata);\n}\n\nfunction manualonoff(channel, onoff) {\n  if (onoff == true) {\n    console.log(\" manualonoff  on channel : \" + channel);\n  } else {\n    console.log(\" manualonoff  off channel : \" + channel);\n  }\n\n  const mdev = new manualMessage();\n  mdev.hardwareChannel = channel;\n  mdev.isonoff = onoff;\n  IndoorFarmAPI.setmanualonoff(mdev);\n}\n\nfunction outboxfunciton(mydata, ntime) {\n  console.log(\"outboxfunciton 01 : \" + ntime);\n  let ismanual;\n\n  if (mydata.Status === Outputdevice.OPStatus.OPS_Local) {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uD604\\uC7A5\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  } else if (mydata.Autocontrolid == 0) {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => manualonoff(mydata.Channel, true),\n        children: \"\\uC218\\uB3D9 On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 22\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => manualonoff(mydata.Channel, false),\n        children: \"\\uC218\\uB3D9 Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 95\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 18\n    }, this);\n  } else {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uC790\\uB3D9\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outputbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mydata.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [mydata.Status, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), ismanual]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n}\n\nfunction Outputdisplaytest(updateintervalmsec) {\n  _s();\n\n  console.log(\"Outputdisplaytest 01\");\n  const [moutdevarray, setUpdate] = useState([]);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getoutputstatus().then(devices => {\n        setUpdate(devices);\n      });\n    }, updateintervalmsec);\n    return () => clearInterval(interval);\n  }, [moutdevarray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outputtable\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"output display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), moutdevarray.map((localState, index) => outboxfunciton(localState, updateintervalmsec))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Outputdisplaytest, \"cEnadcLmD3zissn0URMn1MNxz64=\");\n\n_c = Outputdisplaytest;\n\nconst Dashboard = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"dashboard Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorbocck\",\n      children: Sensordisplay(2000, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputblock\",\n      children: Outputdisplaytest(2000)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Outputdisplaytest\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/dashboard.js"],"names":["React","Component","useState","useEffect","IndoorFarmAPI","manualMessage","Outputdevice","Sensordisplay","OutputBox","constructor","props","console","log","data","Status","render","manualbutton","Name","Autocontrolid","setmanual","mydata","manualonoff","channel","onoff","mdev","hardwareChannel","isonoff","setmanualonoff","outboxfunciton","ntime","ismanual","OPStatus","OPS_Local","Channel","Outputdisplaytest","updateintervalmsec","moutdevarray","setUpdate","interval","setInterval","getoutputstatus","then","devices","clearInterval","map","localState","index","Dashboard"],"mappings":"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","sourcesContent":["\r\nimport React, { Component,useState, useEffect } from \"react\";\r\nimport IndoorFarmAPI from \"./indoorfarmapi\";\r\nimport manualMessage from \"./manualmessage\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\nimport Sensordisplay from \"./sensordisplay\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\nclass OutputBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"============= onoff : \" +  this.props.data.Status);\r\n   }\r\n\r\n\r\n\r\n    render() {\r\n\r\n    let manualbutton=<ul>자동제어중 </ul>;   \r\n\r\n\r\n      return (\r\n        <div className=\"outputbox\">\r\n          <ul>{this.props.data.Name}</ul>\r\n          <ul>{this.props.data.Status} </ul>\r\n          <ul>{this.props.data.Autocontrolid} </ul>\r\n\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function setmanual(mydata) {\r\n    console.log(\"setmanual 01 : \" + mydata);\r\n  }\r\n  \r\n  \r\n\r\nfunction manualonoff(channel, onoff) {\r\n  if (onoff == true) {\r\n    console.log(\" manualonoff  on channel : \" + channel);\r\n  } else {\r\n    console.log(\" manualonoff  off channel : \" + channel);\r\n  }\r\n\r\n  const mdev = new manualMessage();\r\n  mdev.hardwareChannel = channel;\r\n  mdev.isonoff = onoff;\r\n\r\n  IndoorFarmAPI.setmanualonoff(mdev);\r\n}\r\n\r\n\r\n  function outboxfunciton(mydata, ntime) {\r\n    console.log(\"outboxfunciton 01 : \" + ntime);\r\n    let ismanual;\r\n  \r\n    if(mydata.Status  === Outputdevice.OPStatus.OPS_Local)\r\n    {\r\n\r\n      ismanual=<ul>현장제어중 </ul>;\r\n    }\r\n    else if( mydata.Autocontrolid ==0  )\r\n    {\r\n      ismanual = <ul><button onClick={() => manualonoff(mydata.Channel ,true)}>수동 On</button> <button onClick={() => manualonoff(mydata.Channel,false)}>수동 Off</button></ul>;\r\n      \r\n\r\n    }\r\n    else{\r\n      ismanual=<ul>자동제어중 </ul>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"outputbox\">\r\n      <ul>{mydata.Name}</ul>\r\n      <ul>{mydata.Status} </ul>\r\n      {ismanual}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n  function Outputdisplaytest(updateintervalmsec) {\r\n    console.log(\"Outputdisplaytest 01\");\r\n  \r\n    const [moutdevarray, setUpdate] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n        IndoorFarmAPI.getoutputstatus().then((devices) => {\r\n          setUpdate(devices);\r\n        });\r\n      }, updateintervalmsec);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, [moutdevarray]);\r\n  \r\n    return (\r\n      <div className=\"outputtable\">\r\n        <h1>output display</h1>\r\n        {moutdevarray.map((localState, index) => (\r\n          \r\n          outboxfunciton(localState, updateintervalmsec)\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nconst Dashboard = () => {\r\n    return(\r\n        <div>\r\n            <h2>dashboard Page</h2>\r\n            <div className=\"sensorbocck\">{Sensordisplay(2000,true)}</div>\r\n            <div className=\"outputblock\">{Outputdisplaytest(2000)}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}