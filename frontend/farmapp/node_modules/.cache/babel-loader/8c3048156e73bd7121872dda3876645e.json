{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Loginpage from \"./pages/loginpage\";\nimport Mainpage from \"./pages/mainpage\";\nimport { connect } from \"react-redux\";\nimport { actionSetlogin } from \"./mainAction\";\nimport myGlobalvalues from \"./myGlobal\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst os = require(\"os\");\n\nfunction App(props) {\n  _s();\n\n  /*\n    const islogin = window.sessionStorage.getItem(\"login\");\n    console.log(\"islogin :\" + islogin);\n    if (islogin != null) {\n      if (islogin === \"true\") {\n      //  props.onSetlogin(true);\n      } \n    }\n    else {\n      console.log(\"islogin false :\");\n      //props.onSetlogin(true);\n    }\n  */\n  useEffect(() => {\n    console.log(\"-------------------------react APP start---------------------\");\n    console.log(\"Hostname : \" + os.hostname() + \"OS Type : \" + os.type() + \"Platform : \" + os.platform());\n    console.log(\"myGlobalvalues count :\" + myGlobalvalues.ncount++);\n    const provider = window.sessionStorage.getItem(\"provider\");\n    console.log(\"provider :\" + provider);\n    let hostname = os.hostname();\n\n    if (hostname.indexOf(\"localhost\") != -1) {\n      ///로컬로 접속하면 관리자 계정임\n      myGlobalvalues.islocal = true;\n      myGlobalvalues.isuseradmin = true;\n    } else {\n      myGlobalvalues.islocal = false;\n      myGlobalvalues.isuseradmin = false;\n    }\n\n    myGlobalvalues.farmapi = new IndoorFarmAPI(myGlobalvalues.islocal);\n    let loginrole = window.sessionStorage.getItem(\"login\");\n\n    if (loginrole) {} else {\n      loginrole = \"logout\";\n    }\n\n    props.onSetlogin(loginrole);\n    console.log(\"App  LoginRole : \" + props.LoginRole);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: props.LoginRole == \"logout\" ? Loginpage(props) : Mainpage(props)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 11\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\n\nconst mapStateToProps = function (state) {\n  return {\n    LoginRole: state.LoginRole\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetlogin: value => dispatch(actionSetlogin(value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/App.js"],"names":["React","useState","useEffect","Loginpage","Mainpage","connect","actionSetlogin","myGlobalvalues","IndoorFarmAPI","os","require","App","props","console","log","hostname","type","platform","ncount","provider","window","sessionStorage","getItem","indexOf","islocal","isuseradmin","farmapi","loginrole","onSetlogin","LoginRole","mapStateToProps","state","mapDispatchToProps","dispatch","value"],"mappings":";;;AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAOC,cAAP,MAA2B,YAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGEV,EAAAA,SAAS,CAAC,MAAM;AAEdW,IAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACFD,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBL,EAAE,CAACM,QAAH,EAAhB,GAAgC,YAAhC,GAA+CN,EAAE,CAACO,IAAH,EAA/C,GAA2D,aAA3D,GAA2EP,EAAE,CAACQ,QAAH,EAAvF;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BP,cAAc,CAACW,MAAf,EAAvC;AAEA,UAAMC,QAAQ,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,UAA9B,CAAjB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeK,QAA3B;AAEA,QAAIJ,QAAQ,GAAGN,EAAE,CAACM,QAAH,EAAf;;AACA,QAAIA,QAAQ,CAACQ,OAAT,CAAiB,WAAjB,KAAiC,CAAC,CAAtC,EAAyC;AACvC;AACAhB,MAAAA,cAAc,CAACiB,OAAf,GAAyB,IAAzB;AACAjB,MAAAA,cAAc,CAACkB,WAAf,GAA6B,IAA7B;AACD,KAJD,MAIO;AACLlB,MAAAA,cAAc,CAACiB,OAAf,GAAyB,KAAzB;AACAjB,MAAAA,cAAc,CAACkB,WAAf,GAA6B,KAA7B;AACD;;AAEDlB,IAAAA,cAAc,CAACmB,OAAf,GAAyB,IAAIlB,aAAJ,CAAkBD,cAAc,CAACiB,OAAjC,CAAzB;AAGA,QAAIG,SAAS,GAAGP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,CAAhB;;AAEE,QAAGK,SAAH,EACA,CACC,CAFD,MAGI;AACFA,MAAAA,SAAS,GAAE,QAAX;AACD;;AACDf,IAAAA,KAAK,CAACgB,UAAN,CAAiBD,SAAjB;AAGAd,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAqBF,KAAK,CAACiB,SAAvC;AAED,GAnCQ,EAmCN,EAnCM,CAAT;AAuCA,sBAAQ;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cAAsBjB,KAAK,CAACiB,SAAN,IAAmB,QAAnB,GAA+B1B,SAAS,CAACS,KAAD,CAAxC,GAAkDR,QAAQ,CAACQ,KAAD;AAAhF;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;;GAzDQD,G;;KAAAA,G;;AA2DT,MAAMmB,eAAe,GAAG,UAAUC,KAAV,EAAiB;AACvC,SAAO;AACLF,IAAAA,SAAS,EAAEE,KAAK,CAACF;AADZ,GAAP;AAGD,CAJD;;AAKA,MAAMG,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLL,IAAAA,UAAU,EAAGM,KAAD,IAAWD,QAAQ,CAAC3B,cAAc,CAAC4B,KAAD,CAAf;AAD1B,GAAP;AAGD,CAJD;;AAMA,eAAe7B,OAAO,CAACyB,eAAD,EAAiBE,kBAAjB,CAAP,CAA4CrB,GAA5C,CAAf","sourcesContent":["import \"./App.css\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport Loginpage from \"./pages/loginpage\";\nimport Mainpage from \"./pages/mainpage\";\nimport { connect } from \"react-redux\";\nimport { actionSetlogin } from \"./mainAction\";\n\nimport myGlobalvalues from \"./myGlobal\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\n\nconst os = require(\"os\");\n\nfunction App(props) {\n  \n/*\n  const islogin = window.sessionStorage.getItem(\"login\");\n  console.log(\"islogin :\" + islogin);\n  if (islogin != null) {\n    if (islogin === \"true\") {\n    //  props.onSetlogin(true);\n    } \n  }\n  else {\n    console.log(\"islogin false :\");\n    //props.onSetlogin(true);\n  }\n*/\n  \n\n  useEffect(() => {\n  \n    console.log(\"-------------------------react APP start---------------------\");\n  console.log(\"Hostname : \" + os.hostname() + \"OS Type : \" + os.type() + \"Platform : \" + os.platform());\n  console.log(\"myGlobalvalues count :\" + myGlobalvalues.ncount++);\n\n  const provider = window.sessionStorage.getItem(\"provider\");\n  console.log(\"provider :\" + provider);\n\n  let hostname = os.hostname();\n  if (hostname.indexOf(\"localhost\") != -1) {\n    ///로컬로 접속하면 관리자 계정임\n    myGlobalvalues.islocal = true;\n    myGlobalvalues.isuseradmin = true;\n  } else {\n    myGlobalvalues.islocal = false;\n    myGlobalvalues.isuseradmin = false;\n  }\n\n  myGlobalvalues.farmapi = new IndoorFarmAPI(myGlobalvalues.islocal);\n\n\n  let loginrole = window.sessionStorage.getItem(\"login\");\n\n    if(loginrole)\n    {\n    }\n    else{\n      loginrole =\"logout\";\n    }\n    props.onSetlogin(loginrole);\n  \n\n    console.log(\"App  LoginRole : \" +props.LoginRole);\n    \n  }, []);\n\n\n\n  return (<div className=\"App\">{props.LoginRole == \"logout\" ?  Loginpage(props) : Mainpage(props)}</div>);\n}\n\nconst mapStateToProps = function (state) {\n  return {\n    LoginRole: state.LoginRole,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSetlogin: (value) => dispatch(actionSetlogin(value)),\n  };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}