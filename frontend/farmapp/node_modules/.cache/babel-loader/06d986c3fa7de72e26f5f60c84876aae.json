{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\pages\\\\loginpage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport myGlobalvalues from \"../myGlobal\";\nimport { connect } from 'react-redux';\nimport { actionSetlogin } from '../mainAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst crypto = require('crypto');\n\nfunction Loginpage(props) {\n  let loginid;\n  let loginpw;\n  let logintype;\n  console.log(\"Loginpage  :\" + props.Islogin);\n\n  if (myGlobalvalues.islocal === false) {\n    logintype = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"ID:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"inputloginid\",\n        onChange: inputonchangeHandler\n      }, \"1234\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }, this);\n  } else {\n    logintype = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uAC04\\uD3B8\\uB85C\\uADF8\\uC778:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  }\n\n  function inputonchangeHandler(e) {\n    console.log(\"inputonchangeHandler : \" + e.target.name);\n\n    switch (e.target.name) {\n      case \"inputloginid\":\n        loginid = e.target.value;\n        break;\n\n      case \"inputloginpw\":\n        loginpw = e.target.value;\n        break;\n    }\n  }\n\n  function loginbuttonHandler(e) {\n    console.log(\"loginbuttonHandler : \" + e.target.name + \" id : \" + loginid + \" , pw : \" + loginpw);\n    props.dispatch(actionSetlogin(true));\n    window.sessionStorage.setItem('login', \"true\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [logintype, /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC554\\uD638:  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"inputloginpw\",\n        onChange: inputonchangeHandler\n      }, \"1234\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"out_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_on\",\n          onClick: loginbuttonHandler,\n          children: \" \\uB85C\\uADF8\\uC778 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, \"sdaff\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Loginpage;\n;\n\nconst mapStateToProps = function (state) {\n  return {\n    Islogin: state.Islogin\n  };\n};\n\nexport default connect(mapStateToProps)(Loginpage); //export default Loginpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Loginpage\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/pages/loginpage.js"],"names":["React","useState","useEffect","myGlobalvalues","connect","actionSetlogin","crypto","require","Loginpage","props","loginid","loginpw","logintype","console","log","Islogin","islocal","inputonchangeHandler","e","target","name","value","loginbuttonHandler","dispatch","window","sessionStorage","setItem","mapStateToProps","state"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,aAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,QAA+B,eAA/B;;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAIA,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAErB,MAAIC,OAAJ;AACA,MAAIC,OAAJ;AAGA,MAAIC,SAAJ;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBL,KAAK,CAACM,OAAnC;;AAEA,MAAIZ,cAAc,CAACa,OAAf,KAA2B,KAA/B,EAAsC;AAClCJ,IAAAA,SAAS,gBAEP;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAA8B,QAAA,IAAI,EAAC,cAAnC;AAAkD,QAAA,QAAQ,EAAEK;AAA5D,SAAuB,MAAvB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAQH,GATD,MASO;AACHL,IAAAA,SAAS,gBACT;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAKH;;AAIH,WAASK,oBAAT,CAA8BC,CAA9B,EAAiC;AAC/BL,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BI,CAAC,CAACC,MAAF,CAASC,IAAjD;;AACA,YAAQF,CAAC,CAACC,MAAF,CAASC,IAAjB;AACI,WAAK,cAAL;AACIV,QAAAA,OAAO,GAAEQ,CAAC,CAACC,MAAF,CAASE,KAAlB;AACF;;AAEF,WAAK,cAAL;AACIV,QAAAA,OAAO,GAAEO,CAAC,CAACC,MAAF,CAASE,KAAlB;AAEF;AARN;AAaD;;AACD,WAASC,kBAAT,CAA4BJ,CAA5B,EAA+B;AAC7BL,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BI,CAAC,CAACC,MAAF,CAASC,IAAnC,GAA0C,QAA1C,GAAqDV,OAArD,GAA+D,UAA/D,GAA4EC,OAAxF;AAGAF,IAAAA,KAAK,CAACc,QAAN,CAAelB,cAAc,CAAC,IAAD,CAA7B;AACCmB,IAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,OAA9B,EAAsC,MAAtC;AAEF;;AAGD,sBACE;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBACKd,SADL,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAA8B,QAAA,IAAI,EAAC,cAAnC;AAAkD,QAAA,QAAQ,EAAEK;AAA5D,SAAuB,MAAvB;AAAA;AAAA;AAAA;AAAA,cALJ,eAMA;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACC;AAAQ,UAAA,SAAS,EAAC,WAAlB;AAA+B,UAAA,OAAO,EAAEK,kBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cANA;AAAA,OAAS,OAAT;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;KAzEQd,S;AAyER;;AAGD,MAAMmB,eAAe,GAAG,UAASC,KAAT,EAAgB;AACpC,SAAO;AACHb,IAAAA,OAAO,EAAEa,KAAK,CAACb;AADZ,GAAP;AAID,CALH;;AAQA,eAAeX,OAAO,CAACuB,eAAD,CAAP,CAAyBnB,SAAzB,CAAf,C,CAEA","sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport myGlobalvalues from \"../myGlobal\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport { actionSetlogin } from '../mainAction';\r\nconst crypto = require('crypto');\r\n\r\n\r\n\r\nfunction Loginpage(props){\r\n\r\n    let loginid;\r\n    let loginpw;\r\n\r\n    \r\n    let logintype;\r\n\r\n    \r\n    console.log(\"Loginpage  :\" + props.Islogin)  ;\r\n\r\n    if (myGlobalvalues.islocal === false) {\r\n        logintype = (\r\n       \r\n          <div className=\"content\">\r\n            <label>ID:  </label>\r\n            <input type=\"text\" key=\"1234\" name=\"inputloginid\" onChange={inputonchangeHandler} />\r\n          </div>\r\n       \r\n      );\r\n    } else {\r\n        logintype = (\r\n        <div className=\"content\">\r\n            <label>간편로그인:  </label>\r\n          </div>\r\n      );\r\n    }\r\n\r\n\r\n\r\n  function inputonchangeHandler(e) {\r\n    console.log(\"inputonchangeHandler : \" + e.target.name);\r\n    switch (e.target.name) {\r\n        case \"inputloginid\":\r\n            loginid= e.target.value;\r\n          break;\r\n  \r\n        case \"inputloginpw\":\r\n            loginpw= e.target.value;\r\n  \r\n          break;\r\n      }\r\n\r\n\r\n    \r\n  }\r\n  function loginbuttonHandler(e) {\r\n    console.log(\"loginbuttonHandler : \" + e.target.name + \" id : \" + loginid + \" , pw : \" + loginpw);\r\n\r\n    \r\n    props.dispatch(actionSetlogin(true));\r\n     window.sessionStorage.setItem('login',\"true\");    \r\n\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n        <h2>login Page</h2>\r\n        <div key=\"sdaff\">\r\n            {logintype}\r\n\r\n        \r\n            <label>암호:  </label>\r\n            <input type=\"text\" key=\"1234\" name=\"inputloginpw\" onChange={inputonchangeHandler} />\r\n        <div className=\"out_button\">\r\n         <button className=\"button_on\"  onClick={loginbuttonHandler }> 로그인 </button> \r\n        </div>\r\n\r\n        </div>\r\n    </div>\r\n);\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = function(state) {\r\n    return {\r\n        Islogin: state.Islogin,\r\n     \r\n    }\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps)(Loginpage);\r\n\r\n//export default Loginpage;\r\n"]},"metadata":{},"sourceType":"module"}