{"ast":null,"code":"var _jsxFileName = \"H:\\\\KBM_WORK\\\\indoorfarm_work\\\\sfu3300\\\\KDIndoorFarm\\\\frontend\\\\farmapp\\\\src\\\\dashboard.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SensorBox extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.props.data.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.valuestring, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.errorcount > 30 ? \"연결끊김\" : \"Err=\" + this.props.data.errorcount, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction Sensordisplaytest(updateintervalmsec) {\n  _s();\n\n  console.log(\"Sensordisplaytest 01\");\n  const [msensorsarray, setSensors] = useState([]);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getsensordatas().then(sensors => {\n        setSensors(sensors);\n      });\n    }, updateintervalmsec);\n    return () => clearInterval(interval);\n  }, [msensorsarray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensortatble\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"sensor display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), msensorsarray.map((localState, index) => /*#__PURE__*/_jsxDEV(SensorBox, {\n      data: localState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Sensordisplaytest, \"8k2h8u+a4XKCO/7kOqR+GU+4gDU=\");\n\n_c = Sensordisplaytest;\n\nclass OutputBox extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"============= onoff : \" + this.props.data.Status);\n  }\n\n  render() {\n    let manualbutton = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uC790\\uB3D9\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.props.data.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.Status, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [this.props.data.Autocontrolid, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction setmanual(mydata) {\n  console.log(\"setmanual 01 : \" + mydata);\n}\n\nfunction manualonoff(channel, onoff) {\n  if (onoff == true) {\n    console.log(\" manualonoff  on channel : \" + channel);\n  } else {\n    console.log(\" manualonoff  off channel : \" + channel);\n  }\n\n  const mdev = new manualMessage();\n  mdev.hardwareChannel = channel;\n  mdev.isonoff = onoff;\n  IndoorFarmAPI.setmanualonoff(mdev);\n}\n\nfunction outboxfunciton(mydata, ntime) {\n  console.log(\"outboxfunciton 01 : \" + ntime);\n  let ismanual;\n\n  if (mydata.Status === Outputdevice.OPStatus.OPS_Local) {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uD604\\uC7A5\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 16\n    }, this);\n  } else if (mydata.Autocontrolid == 0) {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => manualonoff(mydata.Channel, true),\n        children: \"\\uC218\\uB3D9 On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 22\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => manualonoff(mydata.Channel, false),\n        children: \"\\uC218\\uB3D9 Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 95\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 18\n    }, this);\n  } else {\n    ismanual = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: \"\\uC790\\uB3D9\\uC81C\\uC5B4\\uC911 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outputbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mydata.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [mydata.Status, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), ismanual]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this);\n}\n\nfunction Outputdisplaytest(updateintervalmsec) {\n  _s2();\n\n  console.log(\"Outputdisplaytest 01\");\n  const [moutdevarray, setUpdate] = useState([]);\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      IndoorFarmAPI.getoutputstatus().then(devices => {\n        setUpdate(devices);\n      });\n    }, updateintervalmsec);\n    return () => clearInterval(interval);\n  }, [moutdevarray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outputtable\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"output display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), moutdevarray.map((localState, index) => outboxfunciton(localState, updateintervalmsec))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 7\n  }, this);\n}\n\n_s2(Outputdisplaytest, \"cEnadcLmD3zissn0URMn1MNxz64=\");\n\n_c2 = Outputdisplaytest;\n\nconst Dashboard = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"dashboard Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensorbocck\",\n      children: Sensordisplaytest(2000)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputblock\",\n      children: Outputdisplaytest(2000)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Sensordisplaytest\");\n$RefreshReg$(_c2, \"Outputdisplaytest\");\n$RefreshReg$(_c3, \"Dashboard\");","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/dashboard.js"],"names":["React","Component","useState","useEffect","IndoorFarmAPI","Outputdevice","SensorBox","render","props","data","Name","valuestring","errorcount","Sensordisplaytest","updateintervalmsec","console","log","msensorsarray","setSensors","interval","setInterval","getsensordatas","then","sensors","clearInterval","map","localState","index","OutputBox","constructor","Status","manualbutton","Autocontrolid","setmanual","mydata","manualonoff","channel","onoff","mdev","manualMessage","hardwareChannel","isonoff","setmanualonoff","outboxfunciton","ntime","ismanual","OPStatus","OPS_Local","Channel","Outputdisplaytest","moutdevarray","setUpdate","getoutputstatus","devices","Dashboard"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAC9BM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA,kBAAK,KAAKC,KAAL,CAAWC,IAAX,CAAgBC;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBAAK,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,mBAAM,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,UAAhB,GAA4B,EAA7B,GAAkC,MAAlC,GAA2C,SAAS,KAAKJ,KAAL,CAAWC,IAAX,CAAgBG,UAAzE;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAT6B;;AAYhC,SAASC,iBAAT,CAA2BC,kBAA3B,EAA+C;AAAA;;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,QAAM,CAACC,aAAD,EAAgBC,UAAhB,IAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,GAAG,IAAf;AAEAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BhB,MAAAA,aAAa,CAACiB,cAAd,GAA+BC,IAA/B,CAAqCC,OAAD,IAAa;AAC/CL,QAAAA,UAAU,CAACK,OAAD,CAAV;AACD,OAFD;AAGD,KAJqB,EAInBT,kBAJmB,CAAtB;AAMA,WAAO,MAAMU,aAAa,CAACL,QAAD,CAA1B;AACD,GAVQ,EAUN,CAACF,aAAD,CAVM,CAAT;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,aAAa,CAACQ,GAAd,CAAkB,CAACC,UAAD,EAAaC,KAAb,kBACjB,QAAC,SAAD;AAAW,MAAA,IAAI,EAAED;AAAjB;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzBQb,iB;;KAAAA,iB;;AA8BX,MAAMe,SAAN,SAAwB3B,SAAxB,CAAkC;AAEhC4B,EAAAA,WAAW,CAACrB,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA4B,KAAKR,KAAL,CAAWC,IAAX,CAAgBqB,MAAxD;AACA;;AAIAvB,EAAAA,MAAM,GAAG;AAET,QAAIwB,YAAY,gBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAjB;;AAGE,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA,kBAAK,KAAKvB,KAAL,CAAWC,IAAX,CAAgBC;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBAAK,KAAKF,KAAL,CAAWC,IAAX,CAAgBqB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,mBAAK,KAAKtB,KAAL,CAAWC,IAAX,CAAgBuB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAtB6B;;AAyBhC,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzBnB,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBkB,MAAhC;AACD;;AAIH,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,IAAI,IAAb,EAAmB;AACjBtB,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCoB,OAA5C;AACD,GAFD,MAEO;AACLrB,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCoB,OAA7C;AACD;;AAED,QAAME,IAAI,GAAG,IAAIC,aAAJ,EAAb;AACAD,EAAAA,IAAI,CAACE,eAAL,GAAuBJ,OAAvB;AACAE,EAAAA,IAAI,CAACG,OAAL,GAAeJ,KAAf;AAEAjC,EAAAA,aAAa,CAACsC,cAAd,CAA6BJ,IAA7B;AACD;;AAGC,SAASK,cAAT,CAAwBT,MAAxB,EAAgCU,KAAhC,EAAuC;AACrC7B,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyB4B,KAArC;AACA,MAAIC,QAAJ;;AAEA,MAAGX,MAAM,CAACJ,MAAP,KAAmBzB,YAAY,CAACyC,QAAb,CAAsBC,SAA5C,EACA;AAEEF,IAAAA,QAAQ,gBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AACD,GAJD,MAKK,IAAIX,MAAM,CAACF,aAAP,IAAuB,CAA3B,EACL;AACEa,IAAAA,QAAQ,gBAAG;AAAA,8BAAI;AAAQ,QAAA,OAAO,EAAE,MAAMV,WAAW,CAACD,MAAM,CAACc,OAAR,EAAiB,IAAjB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAJ,oBAA6E;AAAQ,QAAA,OAAO,EAAE,MAAMb,WAAW,CAACD,MAAM,CAACc,OAAR,EAAgB,KAAhB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,YAAX;AAGD,GALI,MAMD;AACFH,IAAAA,QAAQ,gBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACA;AAAA,gBAAKX,MAAM,CAACxB;AAAZ;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,iBAAKwB,MAAM,CAACJ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,EAGCe,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAGD,SAASI,iBAAT,CAA2BnC,kBAA3B,EAA+C;AAAA;;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,QAAM,CAACkC,YAAD,EAAeC,SAAf,IAA4BjD,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,GAAG,IAAf;AAEAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BhB,MAAAA,aAAa,CAACgD,eAAd,GAAgC9B,IAAhC,CAAsC+B,OAAD,IAAa;AAChDF,QAAAA,SAAS,CAACE,OAAD,CAAT;AACD,OAFD;AAGD,KAJqB,EAInBvC,kBAJmB,CAAtB;AAMA,WAAO,MAAMU,aAAa,CAACL,QAAD,CAA1B;AACD,GAVQ,EAUN,CAAC+B,YAAD,CAVM,CAAT;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,YAAY,CAACzB,GAAb,CAAiB,CAACC,UAAD,EAAaC,KAAb,KAEhBgB,cAAc,CAACjB,UAAD,EAAaZ,kBAAb,CAFf,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;IA1BQmC,iB;;MAAAA,iB;;AA6BX,MAAMK,SAAS,GAAG,MAAM;AACpB,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8BzC,iBAAiB,CAAC,IAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8BoC,iBAAiB,CAAC,IAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;MAAMK,S;AAWN,eAAeA,SAAf","sourcesContent":["\r\nimport React, { Component,useState, useEffect } from \"react\";\r\nimport IndoorFarmAPI from \"./indoorfarmapi\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\n\r\nclass SensorBox extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"sensorbox\">\r\n          <ul>{this.props.data.Name}</ul>\r\n          <ul>{this.props.data.valuestring} </ul>\r\n          <ul>{(this.props.data.errorcount >30)? \"연결끊김\" :(\"Err=\" + this.props.data.errorcount)} </ul>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  function Sensordisplaytest(updateintervalmsec) {\r\n    console.log(\"Sensordisplaytest 01\");\r\n  \r\n    const [msensorsarray, setSensors] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n        IndoorFarmAPI.getsensordatas().then((sensors) => {\r\n          setSensors(sensors);\r\n        });\r\n      }, updateintervalmsec);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, [msensorsarray]);\r\n  \r\n    return (\r\n      <div className=\"sensortatble\">\r\n        <h1>sensor display</h1>\r\n        {msensorsarray.map((localState, index) => (\r\n          <SensorBox data={localState} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  \r\n\r\nclass OutputBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"============= onoff : \" +  this.props.data.Status);\r\n   }\r\n\r\n\r\n\r\n    render() {\r\n\r\n    let manualbutton=<ul>자동제어중 </ul>;   \r\n\r\n\r\n      return (\r\n        <div className=\"outputbox\">\r\n          <ul>{this.props.data.Name}</ul>\r\n          <ul>{this.props.data.Status} </ul>\r\n          <ul>{this.props.data.Autocontrolid} </ul>\r\n\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function setmanual(mydata) {\r\n    console.log(\"setmanual 01 : \" + mydata);\r\n  }\r\n  \r\n  \r\n\r\nfunction manualonoff(channel, onoff) {\r\n  if (onoff == true) {\r\n    console.log(\" manualonoff  on channel : \" + channel);\r\n  } else {\r\n    console.log(\" manualonoff  off channel : \" + channel);\r\n  }\r\n\r\n  const mdev = new manualMessage();\r\n  mdev.hardwareChannel = channel;\r\n  mdev.isonoff = onoff;\r\n\r\n  IndoorFarmAPI.setmanualonoff(mdev);\r\n}\r\n\r\n\r\n  function outboxfunciton(mydata, ntime) {\r\n    console.log(\"outboxfunciton 01 : \" + ntime);\r\n    let ismanual;\r\n  \r\n    if(mydata.Status  === Outputdevice.OPStatus.OPS_Local)\r\n    {\r\n\r\n      ismanual=<ul>현장제어중 </ul>;\r\n    }\r\n    else if( mydata.Autocontrolid ==0  )\r\n    {\r\n      ismanual = <ul><button onClick={() => manualonoff(mydata.Channel ,true)}>수동 On</button> <button onClick={() => manualonoff(mydata.Channel,false)}>수동 Off</button></ul>;\r\n      \r\n\r\n    }\r\n    else{\r\n      ismanual=<ul>자동제어중 </ul>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"outputbox\">\r\n      <ul>{mydata.Name}</ul>\r\n      <ul>{mydata.Status} </ul>\r\n      {ismanual}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n  function Outputdisplaytest(updateintervalmsec) {\r\n    console.log(\"Outputdisplaytest 01\");\r\n  \r\n    const [moutdevarray, setUpdate] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      let interval = null;\r\n  \r\n      interval = setInterval(() => {\r\n        IndoorFarmAPI.getoutputstatus().then((devices) => {\r\n          setUpdate(devices);\r\n        });\r\n      }, updateintervalmsec);\r\n  \r\n      return () => clearInterval(interval);\r\n    }, [moutdevarray]);\r\n  \r\n    return (\r\n      <div className=\"outputtable\">\r\n        <h1>output display</h1>\r\n        {moutdevarray.map((localState, index) => (\r\n          \r\n          outboxfunciton(localState, updateintervalmsec)\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nconst Dashboard = () => {\r\n    return(\r\n        <div>\r\n            <h2>dashboard Page</h2>\r\n            <div className=\"sensorbocck\">{Sensordisplaytest(2000)}</div>\r\n            <div className=\"outputblock\">{Outputdisplaytest(2000)}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}