{"ast":null,"code":"import reqMessage from \"./reqMessage\";\nimport Sensordevice from \"./commonjs/sensordevice\";\nimport Outputdevice from \"./commonjs/outputdevice\";\nimport AutoControl from \"./commonjs/autocontrol\";\nimport responseMessage from \"./commonjs/responseMessage\";\nimport myGlobalvalues from \"./myGlobal\";\nimport KDCommon from \"./commonjs/kdcommon\";\nimport firebase from \"./firebase.js\";\nlet database = firebase.database();\nlet frrequest = database.ref('Sensors/request/message');\nlet frresponse = database.ref('Sensors/response/message');\nlet resposemsg;\nconst API = \"/api/\";\nexport default class IndoorFarmAPI {\n  constructor(islocal) {\n    this.islocal = islocal;\n\n    if (this.islocal === false) {\n      frresponse.on('value', snapshot => {\n        const data = snapshot.val();\n        resposemsg = JSON.parse(data); //  console.log(\"resposemsg ...event...\");\n        //console.log(resposemsg);\n      });\n    }\n  }\n\n  async postData(url = \"\", data = {}) {\n    let response;\n\n    if (this.islocal === false) {\n      resposemsg = null;\n      frrequest.set(JSON.stringify(data)); //5초 동안 응답기다림.\n\n      for (let i = 0; i < 50; i++) {\n        await KDCommon.delay(100);\n\n        if (resposemsg != null) {\n          //    console.log(\"resposemsg\");\n          return resposemsg;\n        }\n      }\n    } else {\n      response = await fetch(url, {\n        method: \"POST\",\n        // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\",\n        // no-cors, *cors, same-origin\n        cache: \"no-cache\",\n        // *default, no-cache, reload, force-cache, only-if-cached\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data) // \n\n      });\n    }\n\n    return response.json();\n  }\n\n  async getsensordatas() {\n    const resdata = await this.getRequest(true, false, false, false);\n\n    if (resdata) {\n      return resdata.Sensors;\n    }\n\n    return null;\n  }\n\n  async getoutputstatus() {\n    const resdata = await this.getRequest(false, true, false, false);\n\n    if (resdata) {\n      return resdata.Outputs;\n    }\n\n    return null;\n  }\n\n  async getautocontrols() {\n    return await this.getRequest(true, true, true, true);\n  } // 서버에 데이터 저장 요청\n\n\n  async setRequest(mReqmsg) {\n    let isok = false;\n\n    try {\n      const resdata = await this.postData(API + \"farmrequest\", mReqmsg);\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\n      isok = true;\n    } catch (error) {\n      console.log(\" setRequest error : \" + error);\n    } finally {\n      console.log(\" setRequest finally  : \" + isok);\n      return isok;\n    }\n  } //서버에 상태및 정보 요청\n\n\n  async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\n    let mrepmsg = new responseMessage();\n\n    try {\n      const reqmsg = new reqMessage(\"IF9987\"); //자동제어  센서목록, 출력목록 다 가져옴\n\n      reqmsg.getAutoControlstate = isautostate;\n      reqmsg.getSensors = isensor;\n      reqmsg.getOutputport = isoutdev;\n      reqmsg.getAutoControl = isautocontrol;\n      const resdata = await this.postData(API + \"farmrequest\", reqmsg);\n      resdata.AutoControls.forEach(element => {\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\n      });\n      resdata.Sensors.forEach(element => {\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\n      });\n      resdata.Outputs.forEach(element => {\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\n      });\n    } catch (error) {\n      console.log(\" getRequest error : \" + error);\n    } finally {\n      console.log(\" getRequest finally  : \" + mrepmsg);\n      return mrepmsg;\n    }\n  }\n\n  async setmanualonoff(moutputport) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.setManualControl = true;\n    reqmsg.OutputManual.push(moutputport);\n    return await this.setRequest(reqmsg);\n  }\n\n  async setAutocontrolsetup(mAutocfg) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.setAutocontrol = true;\n    reqmsg.Autoconfigitem = mAutocfg;\n    return await this.setRequest(reqmsg);\n  }\n\n  async setDeviceconfigsetup(mDevcfg) {\n    const reqmsg = new reqMessage(\"IF9987\");\n    reqmsg.setDeviceconfig = true;\n    reqmsg.Deviceconfigitem = mDevcfg;\n    return await this.setRequest(reqmsg);\n  }\n\n}","map":{"version":3,"sources":["H:/KBM_WORK/indoorfarm_work/sfu3300/KDIndoorFarm/frontend/farmapp/src/indoorfarmapi.js"],"names":["reqMessage","Sensordevice","Outputdevice","AutoControl","responseMessage","myGlobalvalues","KDCommon","firebase","database","frrequest","ref","frresponse","resposemsg","API","IndoorFarmAPI","constructor","islocal","on","snapshot","data","val","JSON","parse","postData","url","response","set","stringify","i","delay","fetch","method","mode","cache","headers","body","json","getsensordatas","resdata","getRequest","Sensors","getoutputstatus","Outputs","getautocontrols","setRequest","mReqmsg","isok","console","log","IsOK","error","isensor","isoutdev","isautostate","isautocontrol","mrepmsg","reqmsg","getAutoControlstate","getSensors","getOutputport","getAutoControl","AutoControls","forEach","element","push","Clonbyjsonobj","setmanualonoff","moutputport","setManualControl","OutputManual","setAutocontrolsetup","mAutocfg","setAutocontrol","Autoconfigitem","setDeviceconfigsetup","mDevcfg","setDeviceconfig","Deviceconfigitem"],"mappings":"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","sourcesContent":["import reqMessage from \"./reqMessage\";\r\n\r\nimport Sensordevice from \"./commonjs/sensordevice\";\r\nimport Outputdevice from \"./commonjs/outputdevice\";\r\nimport AutoControl from \"./commonjs/autocontrol\";\r\nimport responseMessage from \"./commonjs/responseMessage\";\r\nimport myGlobalvalues from \"./myGlobal\";\r\nimport KDCommon  from \"./commonjs/kdcommon\";\r\n\r\n\r\nimport firebase from \"./firebase.js\";\r\nlet database = firebase.database();\r\nlet frrequest =database.ref('Sensors/request/message');\r\nlet frresponse =database.ref('Sensors/response/message');\r\n\r\n\r\n\r\nlet resposemsg ;\r\n\r\nconst API = \"/api/\";\r\n\r\nexport default class IndoorFarmAPI {\r\n\r\n\r\n  constructor(islocal) {\r\n  this.islocal= islocal;\r\n  if(this.islocal === false)\r\n  {\r\n     \r\n\r\n    frresponse.on('value', (snapshot) => {\r\n        const data = snapshot.val();\r\n\r\n         resposemsg = JSON.parse(data);\r\n       //  console.log(\"resposemsg ...event...\");\r\n\r\n         //console.log(resposemsg);\r\n\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  }\r\n\r\n   async postData(url = \"\", data = {}) {\r\n\r\n    let response ;\r\n\r\n    if(this.islocal === false)\r\n  {\r\n      resposemsg  =null;\r\n      frrequest.set(JSON.stringify(data));\r\n      //5초 동안 응답기다림.\r\n      for(let i=0;i<50;i++)\r\n      {\r\n        await KDCommon.delay(100);\r\n        if(resposemsg !=null)\r\n        {\r\n      //    console.log(\"resposemsg\");\r\n          return resposemsg;\r\n        }\r\n      }\r\n      \r\n\r\n\r\n\r\n  }\r\n  else\r\n  {\r\n\r\n     response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n\r\n      body: JSON.stringify(data), // \r\n    });\r\n  }\r\n    \r\n    return response.json(); \r\n  \r\n  }\r\n\r\n   async getsensordatas() {\r\n    const resdata = await this.getRequest(true, false, false, false);\r\n    if (resdata) {\r\n      return resdata.Sensors;\r\n    }\r\n    return null;\r\n  }\r\n\r\n   async getoutputstatus() {\r\n    const resdata = await this.getRequest(false, true, false, false);\r\n    if (resdata) {\r\n      return resdata.Outputs;\r\n    }\r\n    return null;\r\n  }\r\n   async getautocontrols() {\r\n    return await this.getRequest(true, true, true, true);\r\n  }\r\n\r\n  // 서버에 데이터 저장 요청\r\n   async setRequest(mReqmsg) {\r\n    let isok = false;\r\n\r\n    \r\n    try {\r\n      const resdata = await this.postData(API + \"farmrequest\", mReqmsg);\r\n      \r\n      console.log(\" setRequest rsp : \" + resdata.IsOK);\r\n      isok = true;\r\n    } catch (error) {\r\n      console.log(\" setRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" setRequest finally  : \" + isok);\r\n      return isok;\r\n    }\r\n  }\r\n\r\n  //서버에 상태및 정보 요청\r\n   async getRequest(isensor, isoutdev, isautostate, isautocontrol) {\r\n    let mrepmsg = new responseMessage();\r\n \r\n\r\n\r\n\r\n    try {\r\n      const reqmsg = new reqMessage(\"IF9987\");\r\n      //자동제어  센서목록, 출력목록 다 가져옴\r\n      reqmsg.getAutoControlstate = isautostate;\r\n      reqmsg.getSensors = isensor;\r\n      reqmsg.getOutputport = isoutdev;\r\n      reqmsg.getAutoControl = isautocontrol;\r\n\r\n      const resdata = await this.postData(API + \"farmrequest\", reqmsg);\r\n      \r\n\r\n      resdata.AutoControls.forEach((element) => {\r\n        mrepmsg.AutoControls.push(AutoControl.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Sensors.forEach((element) => {\r\n        mrepmsg.Sensors.push(Sensordevice.Clonbyjsonobj(element));\r\n      });\r\n\r\n      resdata.Outputs.forEach((element) => {\r\n        mrepmsg.Outputs.push(Outputdevice.Clonbyjsonobj(element));\r\n      });\r\n    } catch (error) {\r\n      console.log(\" getRequest error : \" + error);\r\n    } finally {\r\n      console.log(\" getRequest finally  : \" + mrepmsg);\r\n      return mrepmsg;\r\n    }\r\n  }\r\n\r\n   async setmanualonoff(moutputport) {\r\n\r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n    reqmsg.setManualControl = true;\r\n    reqmsg.OutputManual.push(moutputport);\r\n\r\n\r\n\r\n    return await this.setRequest(reqmsg);\r\n  }\r\n\r\n   async setAutocontrolsetup(mAutocfg) {\r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n    reqmsg.setAutocontrol = true;\r\n    reqmsg.Autoconfigitem = mAutocfg;\r\n    \r\n    return await this.setRequest(reqmsg);\r\n  }\r\n\r\n   async setDeviceconfigsetup(mDevcfg) {\r\n    \r\n    const reqmsg = new reqMessage(\"IF9987\");\r\n    reqmsg.setDeviceconfig = true;\r\n    reqmsg.Deviceconfigitem = mDevcfg;\r\n    \r\n    return await this.setRequest(reqmsg);\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}