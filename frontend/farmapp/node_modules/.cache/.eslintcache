[{"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\index.js":"1","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\App.js":"2","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\indoorfarmapi.js":"3","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\manualmessage.js":"4","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\reqMessage.js":"5","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\sensordevice.js":"6","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\outputdevice.js":"7","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\responseMessage.js":"8","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\sensordisplay.js":"9","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\outputdevicedisplay.js":"10","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\autocontrol.js":"11","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\autocontrolconfig.js":"12","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\autocontrolstatus.js":"13","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\dashboard.js":"14","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\autocontrolpage.js":"15","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\devicepage.js":"16","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\sensorpage.js":"17","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\about.js":"18"},{"size":434,"mtime":1622166928147,"results":"19","hashOfConfig":"20"},{"size":2948,"mtime":1622620672533,"results":"21","hashOfConfig":"20"},{"size":5616,"mtime":1622512082630,"results":"22","hashOfConfig":"20"},{"size":112,"mtime":1621219545114,"results":"23","hashOfConfig":"20"},{"size":274,"mtime":1622460504504,"results":"24","hashOfConfig":"20"},{"size":9460,"mtime":1622017124546,"results":"25","hashOfConfig":"20"},{"size":1188,"mtime":1622597728046,"results":"26","hashOfConfig":"20"},{"size":296,"mtime":1622192709508,"results":"27","hashOfConfig":"20"},{"size":997,"mtime":1622622650874,"results":"28","hashOfConfig":"20"},{"size":2038,"mtime":1622621980963,"results":"29","hashOfConfig":"20"},{"size":2406,"mtime":1622463525272,"results":"30","hashOfConfig":"20"},{"size":1463,"mtime":1622446140249,"results":"31","hashOfConfig":"20"},{"size":933,"mtime":1622463505649,"results":"32","hashOfConfig":"20"},{"size":1035,"mtime":1622619053819,"results":"33","hashOfConfig":"20"},{"size":10878,"mtime":1622461739044,"results":"34","hashOfConfig":"20"},{"size":610,"mtime":1622621858647,"results":"35","hashOfConfig":"20"},{"size":2260,"mtime":1622621235664,"results":"36","hashOfConfig":"20"},{"size":163,"mtime":1622102406373,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1lqgpbv",{"filePath":"41","messages":"42","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\index.js",[],["79","80"],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\App.js",["81","82","83","84","85","86","87","88","89"],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\indoorfarmapi.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\manualmessage.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\reqMessage.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\sensordevice.js",["90","91"],"\r\n\r\n\r\n\r\nconst KDSensorTypeEnum = Object.freeze(\r\n    {\r\n\r\n        SUT_None: 0,\r\n        SUT_Temperature: 1,           //공기온도\r\n        SUT_Humidity: 2,\r\n        SUT_SoilTemperature: 3,\r\n        SUT_SoilMoisture: 4,\r\n        SUT_SoilEC: 5,\r\n        SUT_CO2: 6,\r\n        SUT_WTemperature: 7, ///배지온도\r\n        SUT_SoraRadiation: 8,\r\n        SUT_WINDSPEED: 9,\r\n        SUT_WINDVANE: 10,\r\n        SUT_BAROMETER: 11,\r\n        SUT_PRESSURE: 12,\r\n        SUT_RAINGUAGE: 13,\r\n        SUT_RAINDETECTOR: 14,\r\n        SUT_UV: 15,\r\n\r\n        SUT_PE300_PH: 16,                           ///\r\n        SUT_PE300_EC: 17,\r\n        SUT_PE300_TEMP: 18,\r\n\r\n        SUT_CO1: 19, //Co  센서\r\n        SUT_O2: 20, //산소 센서\r\n\r\n        SUT_LIGHT: 21, //SMBL 조도 센서\r\n\r\n        SUT_COLOR_RED: 22, //SMBL 컬러센서 Red   n 0~100000\r\n        SUT_COLOR_GREEN: 23, //SMBL 컬러센서 Green  n  0~100000\r\n        SUT_COLOR_BLUE: 24, //SMBL 컬러센서 Blue  n 0~100000\r\n\r\n        SUT_AMMONIA: 25, //암모니아 센서 ppm  0~1000\r\n        SUT_FLOWMETER: 26, //유량계  L/min    0.01~1000.00\r\n        SUT_FLOWMETER_TOTAL: 27, //적산 유량계  L    0.1~10000.0\r\n\r\n        SUT_BATTRY: 28, //베터리 레벨  Battery %   0~100 %\r\n        SUT_WEIGHT_KG: 29, //무게  Weght kg   0.001 소수점 3자리\r\n        SUT_WATER_MM: 30, //수위      mm  1~10000mm\r\n\r\n        SUT_DO_MG: 31, //용존산소량  ( DO)    0~20 mg/L  소수점 2자리\r\n\r\n        SUT_SoilBulkEC: 32, // 토양 벌크 EC\r\n        SUT_Counter: 33, //  단순계수기\r\n\r\n        SUT_H2S: 34, //  황화수소\r\n        SUT_PM25: 35, //  초미세먼지\r\n        SUT_PM10: 36, //  미세먼지\r\n        SUT_C1H4: 37, //  매탄\r\n        SUT_C2H6: 38, //  에탄\r\n        SUT_C3H6: 39, // 프로판\r\n        SUT_SOLARMJ: 40,// MJ/m2    누적일사량    메가 줄  소수점 3자리\r\n        SUT_DEWPOINT: 41,// ℃   이슬점     소스점 1자리\r\n\r\n    });\r\n\r\n\r\n\r\n class Sensordevice{\r\n        static Clonbyjsonobj(mobj)\r\n        {\r\n            return new Sensordevice(mobj.nodeID,mobj.SensorCode, mobj.value, mobj.status,mobj.errorcount);\r\n        }\r\n    \r\n        constructor(nodeid, sensorcode,sensorvalue,sensorstatus, errorcount=0) {\r\n    \r\n    \r\n            let hwchannel = (sensorcode >> 8) & 0xff;\r\n            let sensortype = sensorcode & 0xff;\r\n\r\n            this.nodeID = nodeid;\r\n            this.Name = \"sensor\";\r\n            this.ValueUnit = \" \";\r\n            this.SignificantDigit = 3;\r\n            this.channel = hwchannel;\r\n            this.value = sensorvalue;//Buffer.from([(repdatas[0] >> 0) & 0xFF, (repdatas[0] >> 8) & 0xFF, (repdatas[1] >> 0) & 0xFF, (repdatas[1] >> 8) & 0xFF]).readFloatLE(0);\r\n            this.status =sensorstatus;// repdatas[2];\r\n            this.Sensortype = sensortype;\r\n            this.SensorCode = sensorcode;\r\n            this.UniqID = \"S\"+nodeid+\"C\"+sensorcode; // 센서를 구별하는 고유ID  센서노드와 채널 타입정보로 생성한다. S11C123\r\n            this.errorcount=errorcount;\r\n\r\n            switch (this.Sensortype) {\r\n                case KDSensorTypeEnum.SUT_Temperature: this.ValueUnit = \"℃\"; this.Name = \"온도\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_Humidity: this.ValueUnit = \"%\"; this.Name = \"습도\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_SoilTemperature: this.ValueUnit = \"℃\"; this.Name = \"토양온도\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_SoilMoisture: this.ValueUnit = \"%vol.\"; this.Name = \"토양함수율\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_SoilEC: this.ValueUnit = \"dS/m\"; this.Name = \"토양EC\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_CO2: this.ValueUnit = \"ppm\"; this.Name = \"이산화탄소\"; this.SignificantDigit = 0; break;\r\n                \r\n    \r\n                case KDSensorTypeEnum.SUT_WTemperature: this.ValueUnit = \"℃\"; this.Name = \"배지온도\"; this.SignificantDigit = 1; break;\r\n    \r\n    \r\n                case KDSensorTypeEnum.SUT_SoraRadiation: this.ValueUnit = \"W/m2\"; this.Name = \"일사\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_WINDSPEED: this.ValueUnit = \"°\"; this.Name = \"풍향\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_WINDVANE: this.ValueUnit = \"m/s\"; this.Name = \"풍속\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_BAROMETER: this.ValueUnit = \"hPa\"; this.Name = \"대기압\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PRESSURE: this.ValueUnit = \"hPa\"; this.Name = \"압력\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_RAINGUAGE: this.ValueUnit = \"mm\"; this.Name = \"강우량\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_RAINDETECTOR: this.ValueUnit = \" \"; this.Name = \"강우감지\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_UV: this.ValueUnit = \"\"; this.Name = \"UV\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PE300_PH: this.ValueUnit = \" \"; this.Name = \"pH\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PE300_EC: this.ValueUnit = \"dS/m\"; this.Name = \"EC\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PE300_TEMP: this.ValueUnit = \"℃\"; this.Name = \"PE300온도\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_CO1: this.ValueUnit = \"ppm\"; this.Name = \"일산화탄소\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_O2: this.ValueUnit = \"%\"; this.Name = \"산소\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_LIGHT: this.ValueUnit = \"Lux\"; this.Name = \"조도\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_COLOR_RED: this.ValueUnit = \" \"; this.Name = \"RED\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_COLOR_GREEN: this.ValueUnit = \" \"; this.Name = \"GREEN\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_COLOR_BLUE: this.ValueUnit = \" \"; this.Name = \"BLUE\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_AMMONIA: this.ValueUnit = \"ppm\"; this.Name = \"암모니아\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_FLOWMETER: this.ValueUnit = \"L/min\"; this.Name = \"유량\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_FLOWMETER_TOTAL: this.ValueUnit = \"L\"; this.Name = \"적산유량\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_BATTRY: this.ValueUnit = \"%\"; this.Name = \"베터리\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_WEIGHT_KG: this.ValueUnit = \"kg\"; this.Name = \"무게\"; this.SignificantDigit = 3; break;\r\n                case KDSensorTypeEnum.SUT_WATER_MM: this.ValueUnit = \"mm\"; this.Name = \"수위\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_DO_MG: this.ValueUnit = \"mg/L\"; this.Name = \"용존산소량\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_SoilBulkEC: this.ValueUnit = \"dS/m\"; this.Name = \"벌크EC\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_Counter: this.ValueUnit = \"N\"; this.Name = \"계수기\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_H2S: this.ValueUnit = \"ppm\"; this.Name = \"황화수소\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_PM25: this.ValueUnit = \"ug\"; this.Name = \"초미세먼지\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_PM10: this.ValueUnit = \"ug\"; this.Name = \"미세먼지\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_C1H4: this.ValueUnit = \"ppm\"; this.Name = \"메탄\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_C2H6: this.ValueUnit = \"ppm\"; this.Name = \"에탄\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_C3H6: this.ValueUnit = \"ppm\"; this.Name = \"프로판\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_SOLARMJ: this.ValueUnit = \"J/cm2\"; this.Name = \"누적일사량\"; this.SignificantDigit = 3; break;\r\n                case KDSensorTypeEnum.SUT_DEWPOINT: this.ValueUnit = \"℃\"; this.Name = \"이슬점\"; this.SignificantDigit = 1; break;\r\n                default:\r\n                    this.ValueUnit = \" \"; this.Name = \"신규센서\"; this.SignificantDigit = 1; \r\n                    break;\r\n    \r\n            }\r\n    \r\n            this.valuestring = this.GetValuestring(false,false);\r\n    \r\n    \r\n    \r\n        }\r\n\r\n    //  console.log(\"SensorDevice  : \" + this.value );\r\n\r\n\r\n    //센서값을 문자열로표시 표시\r\n    GetValuestring(isWithname, isWithunit){\r\n\r\n        let strvalue = \"\";\r\n\r\n        if (isWithname == true) {\r\n\r\n            strvalue += this.Name + \" \";\r\n        }\r\n\r\n        strvalue += this.value.toFixed(this.SignificantDigit);\r\n        if (isWithunit == true) {\r\n            strvalue += \" \" + this.ValueUnit;\r\n        }\r\n\r\n        return strvalue;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nmodule.exports = Sensordevice;\r\n\r\n","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\outputdevice.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\responseMessage.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\sensordisplay.js",["92"],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\outputdevicedisplay.js",["93","94","95","96","97"],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\autocontrol.js",["98","99","100"],"\r\nconst AutoControlStatus = require(\"./autocontrolstatus\");\r\nconst AutoControlconfig = require(\"./autocontrolconfig\");\r\n\r\nmodule.exports = class AutoControl {\r\n  constructor(mconfig) {\r\n    this.mConfig = mconfig;\r\n    this.mState = new AutoControlStatus(mconfig.UniqID);\r\n  }\r\n\r\n  static Clonbyjsonobj(mobj) {\r\n    return new AutoControl(mobj.mConfig);\r\n  }\r\n\r\n  //테스트용 나중에 삭제..\r\n  controlbypwm() {\r\n    let mstatus = true;\r\n\r\n    if (this.mState.pwmonoffstate == true) {\r\n      this.mState.pwmontime_count++;\r\n      if (this.mState.pwmontime_count >= this.mConfig.pwmontime) {\r\n        this.mState.pwmofftime_count = 0;\r\n        this.mState.pwmonoffstate = false;\r\n      }\r\n      mstatus = true;\r\n    } else {\r\n      this.mState.pwmofftime_count++;\r\n      if (this.mState.pwmofftime_count >= this.mConfig.pwmofftime) {\r\n        this.mState.pwmontime_count = 0;\r\n        this.mState.pwmonoffstate = true;\r\n      }\r\n\r\n      mstatus = false;\r\n    }\r\n\r\n    return mstatus;\r\n  }\r\n  controlbytimer() {\r\n    return true;\r\n  }\r\n  controlbysensor(msensors) {\r\n    let mstatus = null;\r\n\r\n    for (const ms of msensors) {\r\n      if (ms.UniqID === this.mConfig.sensorid) {\r\n        if (this.mConfig.condition == \"up\") {\r\n          if (ms.value > this.mConfig.onvalue) {\r\n            mstatus = true;\r\n          } else {\r\n            if (ms.value < this.mConfig.offvalue) {\r\n              mstatus = false;\r\n            }\r\n          }\r\n        } else {\r\n          if (ms.value < this.mConfig.onvalue) {\r\n            mstatus = true;\r\n          } else {\r\n            if (ms.value > this.mConfig.offvalue) {\r\n              mstatus = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return mstatus;\r\n  }\r\n  //자동제어로 동작한후 상태가 변경되면  true  리턴\r\n  ischangebycontrol(msensors, timesecnow) {\r\n    let mstatus = false;\r\n    if (this.mConfig.enabled === false) {\r\n      return false;\r\n    }\r\n\r\n    if (timesecnow >= this.mConfig.starttime && timesecnow < this.mConfig.endtime) {\r\n      if (this.istimer === true) {\r\n        mstatus = this.controlbytimer();\r\n      } else if (this.mConfig.pwmcontrolenable === true) {\r\n        mstatus = this.controlbypwm();\r\n      } else {\r\n        mstatus = this.controlbysensor(msensors);\r\n      }\r\n    } else {\r\n      mstatus = false;\r\n    }\r\n    return this.mState.ischangestatecheck(mstatus);\r\n  }\r\n};\r\n","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\autocontrolconfig.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\autocontrolstatus.js",["101"],"//자동제어시 변경되는 상태나 변수를 저장함.\r\nmodule.exports = class AutoControlStatus {\r\n  constructor(uniqid) {\r\n    this.autouniqid=uniqid;\r\n    this.pwmonoffstate = false;\r\n\r\n    this.pwmontime_count = 0;\r\n    this.pwmofftime_count = 0;\r\n\r\n    //처음초기화상태\r\n    this.onoffstate = null;\r\n  }\r\n  ischangestatecheck(newstate) {\r\n    if (newstate != null) {\r\n      //초기화상태이면 on이던 off 상태를 바로 변경함.\r\n      if (this.onoffstate===null)\r\n      {\r\n        this.onoffstate = newstate;\r\n        return true;\r\n      }\r\n\r\n      if (this.onoffstate != newstate) {\r\n        this.onoffstate = newstate;\r\n        return true;\r\n      }\r\n    }\r\n    else{\r\n      //초기화상태이고 조건이 알수없는 조건이면  off로 우선설정\r\n      if (this.onoffstate===null)\r\n      {\r\n        this.onoffstate = false;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n};\r\n","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\dashboard.js",["102"],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\autocontrolpage.js",["103","104","105","106"],"import React, { Component, useState, useEffect } from \"react\";\r\nimport AutoControlconfig from \"../commonjs/autocontrolconfig\";\r\nimport AutoControl from \"../commonjs/autocontrol\";\r\nimport IndoorFarmAPI from \"../indoorfarmapi\";\r\n\r\nconst Autocontrolpage = () => {\r\n  const [mSensors, setUpdatesensor] = useState([]);\r\n  const [mAutolist, setUpdateauto] = useState([]);\r\n  const [mDevices, setUpdatedevice] = useState([]);\r\n  const [mSelecteditem, setupselected] = useState(null);\r\n\r\n  console.log(\"Autocontrolpage: \");\r\n\r\n  useEffect(() => {\r\n    IndoorFarmAPI.getautocontrols().then((mrsp) => {\r\n      setUpdatesensor(mrsp.Sensors);\r\n      setUpdateauto(mrsp.AutoControls);\r\n      setUpdatedevice(mrsp.Outputs);\r\n    });\r\n  }, []);\r\n\r\n  function secToTime(dayseconds) {\r\n    if (dayseconds >= 24 * 3600) {\r\n      return \"23:59\";\r\n    }\r\n    let hour = Math.floor(dayseconds / 3600);\r\n    let min = Math.floor((dayseconds - hour * 3600) / 60);\r\n    if (hour < 10) hour = \"0\" + hour;\r\n    if (min < 10) min = \"0\" + min;\r\n    console.log(\"secToTime : \" + (hour + \":\" + min));\r\n    return hour + \":\" + min;\r\n  }\r\n\r\n  function timeTosec(timestr) {\r\n    const [hours, minutes] = timestr.split(\":\");\r\n    return Number(hours * 3600 + minutes * 60);\r\n  }\r\n\r\n  function Autocontroleditbox(myeditcfg, msensorlist, mdevlist) {\r\n    //const [misTimershow, selectcontrol] = useState(myeditcfg !=null && myeditcfg.istimer);\r\n    //console.log(\"Autocontroleditbox  misTimershow: \" + misTimershow);\r\n\r\n    if (myeditcfg == null) {\r\n      return <div></div>;\r\n    } else {\r\n      let copycfg = myeditcfg; // AutoControlconfig.deepcopy(mydata.mConfig);\r\n\r\n      console.log(\"Autocontroleditbox  copycfg.istimer: \" + copycfg.istimer);\r\n\r\n      //selectcontrol(copycfg.istimer);\r\n\r\n      //let starttime_sec =/3600)+\":\"+ ((mydata.mConfig.starttime/60)%60);\r\n      //let endtime_sec = (mydata.mConfig.endtime/3600)+\":\"+ ((mydata.mConfig.endtime/60)%60);\r\n\r\n      function setupSave(mcfg) {\r\n        console.log(\"setupSave uid: \" + mcfg.uniqid + \" name : \" + mcfg.name + \" istimer : \" + mcfg.istimer);\r\n\r\n        console.log(\"setupSave uid: \" + \" copycfg istimer : \" + copycfg.istimer);\r\n\r\n        IndoorFarmAPI.setAutocontrolsetup(mcfg).then((ret) => {\r\n          console.log(\"setAutocontrolsetup  uid: \" + ret);\r\n        });\r\n      }\r\n\r\n      function inputonchangeHandler(e) {\r\n        console.log(\"inputonchangeHandler : \" + e.target.name);\r\n\r\n        switch (e.target.name) {\r\n          case \"name\":\r\n            copycfg.name = e.target.value;\r\n            break;\r\n\r\n          case \"onvalue\":\r\n            copycfg.onvalue = Number(e.target.value);\r\n            break;\r\n          case \"offvalue\":\r\n            copycfg.offvalue = Number(e.target.value);\r\n            break;\r\n\r\n          case \"starttime\":\r\n            copycfg.starttime = timeTosec(e.target.value);\r\n            break;\r\n          case \"endtime\":\r\n            copycfg.endtime = timeTosec(e.target.value);\r\n            break;\r\n\r\n          case \"controlsel\":\r\n            if (e.target.checked === true && e.target.id === \"timer\") {\r\n              copycfg.istimer = true;\r\n            } else {\r\n              copycfg.istimer = false;\r\n            }\r\n\r\n            setupselected(AutoControlconfig.deepcopy(copycfg));\r\n            break;\r\n          case \"autoenable\":\r\n            if (e.target.checked === true && e.target.id === \"enable\") {\r\n              copycfg.enabled = true;\r\n            } else {\r\n              copycfg.enabled = false;\r\n            }\r\n\r\n          //  setupselected(AutoControlconfig.deepcopy(copycfg));\r\n\r\n        }\r\n\r\n        if (e.target.name === \"devcheck\") {\r\n          let isexist = false;\r\n          for (let i = 0; i < copycfg.devids.length; i++) {\r\n            if (copycfg.devids[i] === Number(e.target.id)) {\r\n              if (e.target.checked === false) {\r\n                copycfg.devids.splice(i, 1);\r\n                return;\r\n              } else {\r\n                isexist = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          //새로추가\r\n          if (isexist === false) {\r\n            copycfg.devids.push(Number(e.target.id));\r\n          }\r\n        }\r\n      }\r\n\r\n      function sensorselectbox(mitem) {\r\n        return (\r\n          <ui>\r\n            <input type=\"radio\" key={copycfg.uniqid} name=\"sensorsel\" defaultChecked={mitem.seleted} id={mitem.uniqkey} />\r\n            {mitem.title}\r\n          </ui>\r\n        );\r\n      }\r\n\r\n      function devicecheckbox(mitem) {\r\n        return (\r\n          <ui>\r\n            <input type=\"checkbox\" key={copycfg.uniqid} name=\"devcheck\" defaultChecked={mitem.seleted} id={mitem.uniqkey} />\r\n            {mitem.title}\r\n          </ui>\r\n        );\r\n      }\r\n\r\n      let slist = [];\r\n      for (const ss of msensorlist) {\r\n        let seleted = false;\r\n        if (copycfg.sensorid === ss.UniqID) {\r\n          console.log(\"select sensorid : \" + ss.UniqID);\r\n          seleted = true;\r\n        }\r\n        const title = ss.Name + \"(노드:\" + ss.nodeID + \" , 채널 :\" + ss.channel + \")\";\r\n        const uniqkey = ss.UniqID;\r\n        slist.push({ title: title, seleted: seleted, uniqkey: uniqkey });\r\n      }\r\n\r\n      let dlist = [];\r\n      for (const dev of mdevlist) {\r\n        let seleted = false;\r\n\r\n        for (const di of copycfg.devids) {\r\n          if (di === dev.UniqID) {\r\n            console.log(\"select dev id : \" + dev.UniqID);\r\n            seleted = true;\r\n            break;\r\n          }\r\n        }\r\n        const title = dev.Name + \"( 채널 :\" + dev.Channel + \")\";\r\n        const uniqkey = dev.UniqID;\r\n\r\n        dlist.push({ title: title, seleted: seleted, uniqkey: uniqkey });\r\n      }\r\n\r\n      return (\r\n        <div className=\"autosetupbox\">\r\n          \r\n           <div className=\"autoenable\" onChange={inputonchangeHandler}>\r\n                <h4>자동제어 운전변경: \r\n                <input type=\"radio\" key={\"enable\" + copycfg.uniqid} name=\"autoenable\" defaultChecked={copycfg.enabled} id=\"enable\" /> 자동운전\r\n                <input type=\"radio\" key={\"disable\" + copycfg.uniqid} name=\"autoenable\" defaultChecked={copycfg.enabled === false} id=\"disable\"/>정지(수동제어)\r\n                </h4>\r\n              </div>\r\n\r\n          <div className=\"autosetupinnerbox\" >\r\n            <ul>{}</ul>\r\n            <label>이름: </label>\r\n            <input type=\"text\" key={\"name\" + copycfg.uniqid} defaultValue={copycfg.name} name=\"name\" onChange={inputonchangeHandler} />\r\n\r\n            <label>시작시간: </label>\r\n            <input type=\"time\" key={\"starttime\" + copycfg.uniqid} defaultValue={secToTime(copycfg.starttime)} name=\"starttime\" onChange={inputonchangeHandler} />\r\n            <label>종료시간: </label>\r\n            <input type=\"time\" key={\"endtime\" + copycfg.uniqid} defaultValue={secToTime(copycfg.endtime)} name=\"endtime\" onChange={inputonchangeHandler} />\r\n            <p></p>\r\n\r\n            <div className=\"outportselectbox\" onChange={inputonchangeHandler}>\r\n              <h4>출력장치 선택</h4>\r\n              {dlist.map((localState, index) => devicecheckbox(localState))}\r\n            </div>\r\n            <p></p>\r\n            <div>\r\n              <div className=\"controlselectbox\" onChange={inputonchangeHandler}>\r\n                <input type=\"radio\" key={\"timer\" + copycfg.uniqid} name=\"controlsel\" defaultChecked={copycfg.istimer} id=\"timer\" /> 타임머 제어\r\n                <input type=\"radio\" key={\"sensor\" + copycfg.uniqid} name=\"controlsel\" defaultChecked={copycfg.istimer === false} id=\"sensor\" />\r\n                센서제어\r\n              </div>\r\n\r\n              <div className=\"sensorconditionbox\" style={copycfg.istimer === false ? {} : { display: \"none\" }}>\r\n                <div className=\"sensorselectbox\" onChange={inputonchangeHandler}>\r\n                  <h4>센서선택</h4>\r\n                  {slist.map((localState, index) => sensorselectbox(localState))}\r\n                </div>\r\n\r\n                <div className=\"conditionselectbox\" onChange={inputonchangeHandler}>\r\n                  <input type=\"radio\" key={\"up\" + copycfg.uniqid} name=\"conditionsel\" defaultChecked={copycfg.condition === \"up\"} id=\"up\" /> 크면켜짐\r\n                  <input type=\"radio\" key={\"down\" + copycfg.uniqid} name=\"conditionsel\" defaultChecked={copycfg.condition === \"down\"} id=\"down\" />\r\n                  작으면켜짐\r\n                </div>\r\n\r\n                <label>켜짐조건: </label>\r\n                <input type=\"number\" key={\"onvalue\" + copycfg.uniqid} defaultValue={copycfg.onvalue} name=\"onvalue\" onChange={inputonchangeHandler} />\r\n                <label>꺼짐조건: </label>\r\n                <input type=\"number\" key={\"offvalue\" + copycfg.uniqid} defaultValue={copycfg.offvalue} name=\"offvalue\" onChange={inputonchangeHandler} />\r\n              </div>\r\n              <p></p>\r\n              <label>1회구동 최대구동시간: </label>\r\n              <input type=\"number\" key={\"onetime_run\" + copycfg.uniqid} defaultValue={copycfg.onetime_run} name=\"onetime_run\" onChange={inputonchangeHandler} />\r\n\r\n              <label>1회구동후 쉬는시간: </label>\r\n              <input type=\"number\" key={\"onetime_idle\" + copycfg.uniqid} defaultValue={copycfg.onetime_idle} name=\"onetime_idle\" onChange={inputonchangeHandler} />\r\n            </div>\r\n\r\n            <p></p>\r\n\r\n            <button onClick={() => setupSave(copycfg)} id=\"editcheck\">\r\n              {\" \"}\r\n              저장{\" \"}\r\n            </button>\r\n            <button onClick={() => setupselected(null)} id=\"editcheck\">\r\n              취소{\" \"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  function autocontrolbox(mydata) {\r\n    return (\r\n      <div className=\"autocontrolbox\">\r\n        <ui>{mydata.mConfig.name}</ui>\r\n\r\n        <ui>{mydata.mConfig.enabled == true ? \"  작동중\" : \"  정지됨\"}</ui>\r\n        <button onClick={() => setupselected(AutoControlconfig.deepcopy(mydata.mConfig))} id=\"editcheck\">\r\n          설정변경\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function onAdd() {\r\n    let newauto = new AutoControl(new AutoControlconfig());\r\n    mAutolist.push(newauto);\r\n    setUpdateauto(mAutolist);\r\n    setupselected(newauto.mConfig);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>Autocontrol Page</h4>\r\n      <div className=\"controltop\">\r\n        정렬 :\r\n        <select name=\"pets\" id=\"pet-select\">\r\n          <option value=\"1\">시간순서</option>\r\n          <option value=\"2\">이름순서</option>\r\n          <option value=\"3\">카테고리</option>\r\n        </select>\r\n        <button onClick={() => onAdd()}>+ 추가</button>\r\n      </div>\r\n      <div className=\"autocontroltable\">\r\n        {Autocontroleditbox(mSelecteditem, mSensors, mDevices)}\r\n        {mAutolist.map((localState, index) => autocontrolbox(localState))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Autocontrolpage;\r\n","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\devicepage.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\sensorpage.js",["107"],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\pages\\about.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":3,"column":17,"nodeType":"114","messageId":"115","endLine":3,"endColumn":26},{"ruleId":"112","severity":1,"message":"116","line":3,"column":38,"nodeType":"114","messageId":"115","endLine":3,"endColumn":47},{"ruleId":"112","severity":1,"message":"117","line":14,"column":12,"nodeType":"114","messageId":"115","endLine":14,"endColumn":24},{"ruleId":"118","severity":1,"message":"119","line":28,"column":15,"nodeType":"120","endLine":28,"endColumn":66},{"ruleId":"118","severity":1,"message":"119","line":33,"column":19,"nodeType":"120","endLine":33,"endColumn":71},{"ruleId":"118","severity":1,"message":"119","line":38,"column":19,"nodeType":"120","endLine":38,"endColumn":70},{"ruleId":"118","severity":1,"message":"119","line":43,"column":19,"nodeType":"120","endLine":43,"endColumn":70},{"ruleId":"118","severity":1,"message":"119","line":48,"column":19,"nodeType":"120","endLine":48,"endColumn":70},{"ruleId":"118","severity":1,"message":"119","line":53,"column":19,"nodeType":"120","endLine":53,"endColumn":70},{"ruleId":"121","severity":1,"message":"122","line":159,"column":24,"nodeType":"123","messageId":"124","endLine":159,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":165,"column":24,"nodeType":"123","messageId":"124","endLine":165,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":27,"column":34,"nodeType":"120","endLine":27,"endColumn":72},{"ruleId":"121","severity":1,"message":"122","line":7,"column":13,"nodeType":"123","messageId":"124","endLine":7,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":33,"column":35,"nodeType":"123","messageId":"124","endLine":33,"endColumn":37},{"ruleId":"121","severity":1,"message":"122","line":34,"column":22,"nodeType":"123","messageId":"124","endLine":34,"endColumn":24},{"ruleId":"118","severity":1,"message":"119","line":54,"column":34,"nodeType":"120","endLine":54,"endColumn":72},{"ruleId":"118","severity":1,"message":"119","line":55,"column":35,"nodeType":"120","endLine":55,"endColumn":76},{"ruleId":"112","severity":1,"message":"125","line":3,"column":7,"nodeType":"114","messageId":"115","endLine":3,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":19,"column":35,"nodeType":"123","messageId":"124","endLine":19,"endColumn":37},{"ruleId":"121","severity":1,"message":"122","line":46,"column":36,"nodeType":"123","messageId":"124","endLine":46,"endColumn":38},{"ruleId":"121","severity":1,"message":"126","line":22,"column":27,"nodeType":"123","messageId":"124","endLine":22,"endColumn":29},{"ruleId":"112","severity":1,"message":"113","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"113","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"127","severity":1,"message":"128","line":58,"column":39,"nodeType":"123","messageId":"129","endLine":58,"endColumn":40},{"ruleId":"130","severity":1,"message":"131","line":68,"column":9,"nodeType":"132","messageId":"133","endLine":105,"endColumn":10},{"ruleId":"121","severity":1,"message":"122","line":251,"column":37,"nodeType":"123","messageId":"124","endLine":251,"endColumn":39},{"ruleId":"112","severity":1,"message":"134","line":4,"column":10,"nodeType":"114","messageId":"115","endLine":4,"endColumn":24},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'handleChange' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'AutoControlconfig' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ResponsiveBump' is defined but never used.","no-global-assign","no-unsafe-negation"]