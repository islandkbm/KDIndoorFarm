[{"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\index.js":"1","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\App.js":"2","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\reportWebVitals.js":"3","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\indoorfarmapi.js":"4","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\manualmessage.js":"5","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\reqMessage.js":"6","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\sensordevice.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":3202,"mtime":1621675809864,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":2129,"mtime":1621677604970,"results":"12","hashOfConfig":"9"},{"size":112,"mtime":1621219545114,"results":"13","hashOfConfig":"9"},{"size":216,"mtime":1621219546323,"results":"14","hashOfConfig":"9"},{"size":9236,"mtime":1621677568832,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lqgpbv",{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\index.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\App.js",["32","33","34","35","36"],"import './App.css';\nimport { Component } from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport IndoorFarmAPI from \"./indoorfarmapi\";\nimport manualMessage from \"./manualmessage\";\n\n\n\nlet ncount=0;\n\nfunction Imagedisplaytest(updateintervalmsec) {\n  console.log(\"imagedisplaytest 01\");\n\n  \n  const [imgsrc, setImagesr] = useState(\"\");\n  \n\n  useEffect(() => {\n    let interval = null;\n\n    interval = setInterval(() => {\n      \n      \n\n      \n      let urlimg = \"http://192.168.66.1:9527/ipc_snapshot.cgi?user=admin&pwd=admin&2021\" +(ncount);\n\n      let imgss2 = new Image();\n      imgss2.crossOrigin='anonymous';\n      imgss2.src =urlimg;\n      imgss2.onload = function()\n      {\n          \n          console.log(\"imgss22 onload  : \" + ncount );\n          let urlimg = \"http://192.168.66.1:9527/ipc_snapshot.cgi?user=admin&pwd=admin&2021\" +(ncount);\n          setImagesr(urlimg);\n          ncount++;\n\n      };\n     \n\n\n\n    }, updateintervalmsec);\n\n    return () => clearInterval(interval);\n  }, [imgsrc]);\n\n  return (\n    <div className=\"sensortatble\">\n      <h1>sensor display</h1>\n      <img src= {imgsrc}></img>\n    </div>\n  );\n}\n\n\n\nclass SensorBox extends Component {\n  render() {\n    return (\n      <div className=\"sensorbox\">\n        <ul>{this.props.data.Name}</ul>\n        <ul>{this.props.data.valuestring} </ul>\n      </div>\n    );\n  }\n}\n\nfunction Sensordisplaytest(updateintervalmsec) {\n  console.log(\"Sensordisplaytest 01\");\n\n  \n\n  \n  const [msensorsarray, setSensors] = useState([]);\n\n  useEffect(() => {\n    let interval = null;\n\n    interval = setInterval(() => {\n      IndoorFarmAPI.getsensordatas().then((sensors) => {\n        setSensors(sensors);\n      });\n\n \n\n    }, updateintervalmsec);\n\n    return () => clearInterval(interval);\n  }, [msensorsarray]);\n\n  return (\n    <div className=\"sensortatble\">\n      <h1>sensor display</h1>\n      {msensorsarray.map((localState, index) => (\n        <SensorBox data={localState} />\n      ))}\n    </div>\n  );\n}\n\nfunction manualonoff(channel, onoff) {\n    \n\n  if(onoff ==true)\n  {\n    console.log(\" manualonoff  on channel : \" + channel);\n  }else{\n    console.log(\" manualonoff  off channel : \" + channel);\n  }\n  \n  const mdev = new manualMessage();\n  mdev.hardwareChannel = channel;\n  mdev.isonoff = onoff;\n\n\n  IndoorFarmAPI.setmanualonoff(mdev);\n  \n\n\n}\n\n\nfunction App() {\n\n  const [hwchannel, sethwchannel] = useState(0);\n  function handleChange(e) {\n    sethwchannel( e.target.value);\n    console.log(hwchannel);\n  }\n\n  \n  return (\n    <div className=\"App\">\n\nchannel : \n      <input type=\"number\" onChange ={handleChange} min=\"0\" max=\"23\"  />\n\n      <button onClick={()=>manualonoff(hwchannel,true)}>On</button>\n      <button onClick={()=>manualonoff(hwchannel,false)}>Off</button>\n\n\n      <div className=\"sensorbocck\">\n\n\n\n{Sensordisplaytest(2000)}\n</div>\n\n\n      <header className=\"App-header\">\n        \n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\reportWebVitals.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\indoorfarmapi.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\manualmessage.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\reqMessage.js",[],"H:\\KBM_WORK\\indoorfarm_work\\sfu3300\\KDIndoorFarm\\frontend\\farmapp\\src\\commonjs\\sensordevice.js",["37","38"],"\r\n\r\n\r\n\r\nvar KDSensorTypeEnum = Object.freeze(\r\n    {\r\n\r\n        SUT_None: 0,\r\n        SUT_Temperature: 1,           //공기온도\r\n        SUT_Humidity: 2,\r\n        SUT_SoilTemperature: 3,\r\n        SUT_SoilMoisture: 4,\r\n        SUT_SoilEC: 5,\r\n        SUT_CO2: 6,\r\n        SUT_WTemperature: 7, ///배지온도\r\n        SUT_SoraRadiation: 8,\r\n        SUT_WINDSPEED: 9,\r\n        SUT_WINDVANE: 10,\r\n        SUT_BAROMETER: 11,\r\n        SUT_PRESSURE: 12,\r\n        SUT_RAINGUAGE: 13,\r\n        SUT_RAINDETECTOR: 14,\r\n        SUT_UV: 15,\r\n\r\n        SUT_PE300_PH: 16,                           ///\r\n        SUT_PE300_EC: 17,\r\n        SUT_PE300_TEMP: 18,\r\n\r\n        SUT_CO1: 19, //Co  센서\r\n        SUT_O2: 20, //산소 센서\r\n\r\n        SUT_LIGHT: 21, //SMBL 조도 센서\r\n\r\n        SUT_COLOR_RED: 22, //SMBL 컬러센서 Red   n 0~100000\r\n        SUT_COLOR_GREEN: 23, //SMBL 컬러센서 Green  n  0~100000\r\n        SUT_COLOR_BLUE: 24, //SMBL 컬러센서 Blue  n 0~100000\r\n\r\n        SUT_AMMONIA: 25, //암모니아 센서 ppm  0~1000\r\n        SUT_FLOWMETER: 26, //유량계  L/min    0.01~1000.00\r\n        SUT_FLOWMETER_TOTAL: 27, //적산 유량계  L    0.1~10000.0\r\n\r\n        SUT_BATTRY: 28, //베터리 레벨  Battery %   0~100 %\r\n        SUT_WEIGHT_KG: 29, //무게  Weght kg   0.001 소수점 3자리\r\n        SUT_WATER_MM: 30, //수위      mm  1~10000mm\r\n\r\n        SUT_DO_MG: 31, //용존산소량  ( DO)    0~20 mg/L  소수점 2자리\r\n\r\n        SUT_SoilBulkEC: 32, // 토양 벌크 EC\r\n        SUT_Counter: 33, //  단순계수기\r\n\r\n        SUT_H2S: 34, //  황화수소\r\n        SUT_PM25: 35, //  초미세먼지\r\n        SUT_PM10: 36, //  미세먼지\r\n        SUT_C1H4: 37, //  매탄\r\n        SUT_C2H6: 38, //  에탄\r\n        SUT_C3H6: 39, // 프로판\r\n        SUT_SOLARMJ: 40,// MJ/m2    누적일사량    메가 줄  소수점 3자리\r\n        SUT_DEWPOINT: 41,// ℃   이슬점     소스점 1자리\r\n\r\n    });\r\n\r\n\r\n\r\n class Sensordevice{\r\n        static Clonbyjsonobj(mobj)\r\n        {\r\n            return new Sensordevice(mobj.nodeID,mobj.SensorCode, mobj.value, mobj.status);\r\n        }\r\n    \r\n        constructor(nodeid, sensorcode,sensorvalue,sensorstatus) {\r\n    \r\n    \r\n            let hwchannel = (sensorcode >> 8) & 0xff;\r\n            let sensortype = sensorcode & 0xff;\r\n\r\n            this.nodeID = nodeid;\r\n            this.Name = \"sensor\";\r\n            this.ValueUnit = \" \";\r\n            this.SignificantDigit = 3;\r\n            this.channel = hwchannel;\r\n            this.value = sensorvalue;//Buffer.from([(repdatas[0] >> 0) & 0xFF, (repdatas[0] >> 8) & 0xFF, (repdatas[1] >> 0) & 0xFF, (repdatas[1] >> 8) & 0xFF]).readFloatLE(0);\r\n            this.status =sensorstatus;// repdatas[2];\r\n            this.Sensortype = sensortype;\r\n            this.SensorCode = sensorcode;\r\n\r\n            switch (this.Sensortype) {\r\n                case KDSensorTypeEnum.SUT_Temperature: this.ValueUnit = \"℃\"; this.Name = \"온도\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_Humidity: this.ValueUnit = \"%\"; this.Name = \"습도\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_SoilTemperature: this.ValueUnit = \"℃\"; this.Name = \"토양온도\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_SoilMoisture: this.ValueUnit = \"%vol.\"; this.Name = \"토양함수율\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_SoilEC: this.ValueUnit = \"dS/m\"; this.Name = \"토양EC\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_CO2: this.ValueUnit = \"ppm\"; this.Name = \"이산화탄소\"; this.SignificantDigit = 0; break;\r\n                \r\n    \r\n                case KDSensorTypeEnum.SUT_WTemperature: this.ValueUnit = \"℃\"; this.Name = \"배지온도\"; this.SignificantDigit = 1; break;\r\n    \r\n    \r\n                case KDSensorTypeEnum.SUT_SoraRadiation: this.ValueUnit = \"W/m2\"; this.Name = \"일사\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_WINDSPEED: this.ValueUnit = \"°\"; this.Name = \"풍향\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_WINDVANE: this.ValueUnit = \"m/s\"; this.Name = \"풍속\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_BAROMETER: this.ValueUnit = \"hPa\"; this.Name = \"대기압\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PRESSURE: this.ValueUnit = \"hPa\"; this.Name = \"압력\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_RAINGUAGE: this.ValueUnit = \"mm\"; this.Name = \"강우량\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_RAINDETECTOR: this.ValueUnit = \" \"; this.Name = \"강우감지\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_UV: this.ValueUnit = \"\"; this.Name = \"UV\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PE300_PH: this.ValueUnit = \" \"; this.Name = \"pH\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PE300_EC: this.ValueUnit = \"dS/m\"; this.Name = \"EC\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_PE300_TEMP: this.ValueUnit = \"℃\"; this.Name = \"PE300온도\"; this.SignificantDigit = 1; break;\r\n    \r\n                case KDSensorTypeEnum.SUT_CO1: this.ValueUnit = \"ppm\"; this.Name = \"일산화탄소\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_O2: this.ValueUnit = \"%\"; this.Name = \"산소\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_LIGHT: this.ValueUnit = \"Lux\"; this.Name = \"조도\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_COLOR_RED: this.ValueUnit = \" \"; this.Name = \"RED\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_COLOR_GREEN: this.ValueUnit = \" \"; this.Name = \"GREEN\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_COLOR_BLUE: this.ValueUnit = \" \"; this.Name = \"BLUE\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_AMMONIA: this.ValueUnit = \"ppm\"; this.Name = \"암모니아\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_FLOWMETER: this.ValueUnit = \"L/min\"; this.Name = \"유량\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_FLOWMETER_TOTAL: this.ValueUnit = \"L\"; this.Name = \"적산유량\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_BATTRY: this.ValueUnit = \"%\"; this.Name = \"베터리\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_WEIGHT_KG: this.ValueUnit = \"kg\"; this.Name = \"무게\"; this.SignificantDigit = 3; break;\r\n                case KDSensorTypeEnum.SUT_WATER_MM: this.ValueUnit = \"mm\"; this.Name = \"수위\"; this.SignificantDigit = 1; break;\r\n                case KDSensorTypeEnum.SUT_DO_MG: this.ValueUnit = \"mg/L\"; this.Name = \"용존산소량\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_SoilBulkEC: this.ValueUnit = \"dS/m\"; this.Name = \"벌크EC\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_Counter: this.ValueUnit = \"N\"; this.Name = \"계수기\"; this.SignificantDigit = 0; break;\r\n                case KDSensorTypeEnum.SUT_H2S: this.ValueUnit = \"ppm\"; this.Name = \"황화수소\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_PM25: this.ValueUnit = \"ug\"; this.Name = \"초미세먼지\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_PM10: this.ValueUnit = \"ug\"; this.Name = \"미세먼지\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_C1H4: this.ValueUnit = \"ppm\"; this.Name = \"메탄\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_C2H6: this.ValueUnit = \"ppm\"; this.Name = \"에탄\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_C3H6: this.ValueUnit = \"ppm\"; this.Name = \"프로판\"; this.SignificantDigit = 2; break;\r\n                case KDSensorTypeEnum.SUT_SOLARMJ: this.ValueUnit = \"J/cm2\"; this.Name = \"누적일사량\"; this.SignificantDigit = 3; break;\r\n                case KDSensorTypeEnum.SUT_DEWPOINT: this.ValueUnit = \"℃\"; this.Name = \"이슬점\"; this.SignificantDigit = 1; break;\r\n                default:\r\n                    this.ValueUnit = \" \"; this.Name = \"신규센서\"; this.SignificantDigit = 1; \r\n                    break;\r\n    \r\n            }\r\n    \r\n            this.valuestring = this.GetValuestring(false,false);\r\n    \r\n    \r\n    \r\n        }\r\n\r\n    //  console.log(\"SensorDevice  : \" + this.value );\r\n\r\n\r\n    //센서값을 문자열로표시 표시\r\n    GetValuestring(isWithname, isWithunit){\r\n\r\n        let strvalue = \"\";\r\n\r\n        if (isWithname == true) {\r\n\r\n            strvalue += this.Name + \" \";\r\n        }\r\n\r\n        strvalue += this.value.toFixed(this.SignificantDigit);\r\n        if (isWithunit == true) {\r\n            strvalue += \" \" + this.ValueUnit;\r\n        }\r\n\r\n        return strvalue;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nmodule.exports = Sensordevice;\r\n\r\n",{"ruleId":"39","severity":1,"message":"40","line":11,"column":10,"nodeType":"41","messageId":"42","endLine":11,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":47,"column":6,"nodeType":"45","endLine":47,"endColumn":14,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":52,"column":7,"nodeType":"49","endLine":52,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":91,"column":6,"nodeType":"45","endLine":91,"endColumn":21,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":106,"column":12,"nodeType":"53","messageId":"54","endLine":106,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":157,"column":24,"nodeType":"53","messageId":"54","endLine":157,"endColumn":26},{"ruleId":"51","severity":1,"message":"52","line":163,"column":24,"nodeType":"53","messageId":"54","endLine":163,"endColumn":26},"no-unused-vars","'Imagedisplaytest' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateintervalmsec'. Either include it or remove the dependency array.","ArrayExpression",["55"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["56"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [imgsrc, updateintervalmsec]",{"range":"61","text":"62"},"Update the dependencies array to be: [msensorsarray, updateintervalmsec]",{"range":"63","text":"64"},[1010,1018],"[imgsrc, updateintervalmsec]",[1768,1783],"[msensorsarray, updateintervalmsec]"]